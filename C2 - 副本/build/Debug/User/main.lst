###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 09/Jan/2024  17:40:24
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\User\main.c
#    Command line =  
#        -f
#        "e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S8-EE22(Rev1.0)\C\build\Debug\User\main.args.txt"
#        (--silent -lCN .\build\Debug\User\main.lst -I d:/IAR/STM8 -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S003
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\User\main.o .\User\main.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\User\main.lst
#    Object file  =  .\build\Debug\User\main.o
#
###############################################################################

e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S8-EE22(Rev1.0)\C\User\main.c
      1          /**
      2           ******************************************************************************
      3           * @file    Project/main.c
      4           * @author  MCD Application Team
      5           * @version V2.3.0
      6           * @date    16-June-2017
      7           * @brief   Main program body
      8           ******************************************************************************
      9           * @attention
     10           *
     11           * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12           *
     13           * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14           * You may not use this file except in compliance with the License.
     15           * You may obtain a copy of the License at:
     16           *
     17           *        http://www.st.com/software_license_agreement_liberty_v2
     18           *
     19           * Unless required by applicable law or agreed to in writing, software
     20           * distributed under the License is distributed on an "AS IS" BASIS,
     21           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22           * See the License for the specific language governing permissions and
     23           * limitations under the License.
     24           *
     25           ******************************************************************************
     26           */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "init.h"

   \                                 In section .near.noinit, at 0x5000
   \   union <unnamed> volatile _A_PA_ODR
   \                     _A_PA_ODR:
   \   000000              DS8 1

   \                                 In section .near.noinit, at 0x500a
   \   union <unnamed> volatile _A_PC_ODR
   \                     _A_PC_ODR:
   \   000000              DS8 1

   \                                 In section .near.noinit, at 0x500f
   \   union <unnamed> volatile _A_PD_ODR
   \                     _A_PD_ODR:
   \   000000              DS8 1
     30          
     31          /* Private defines -----------------------------------------------------------*/
     32          
     33          // TODO:TM1650-LEDÁ†Å	   0	 1		2     3     4     5    6     7     8     9     A     B     C     D     E     F	  P 	-
     34          // LED7codeH ÂÖ±Èò≥ , LED7codeL ÂÖ±Èò¥

   \                                 In section .near.data, align 1
     35          uint8_t LED7CodeH[] = {~0x3f, ~0x06, ~0x5b, ~0x4f, ~0x66, ~0x6d, ~0x7d, ~0x07, ~0x7f, ~0x6f, ~0x77, ~0x7c, ~0x39, ~0x5e, ~0x79, ~0x71, ~0x73, ~0x40};
   \                     LED7CodeH:
   \   000000 C0 F9 A4 B0  DC8 192, 249, 164, 176, 153, 146, 130, 248, 128, 144, 136, 131, 198
   \          99 92 82 F8 
   \   00000D A1 86 8E 8C  DC8 161, 134, 142, 140, 191
   \          BF          

   \                                 In section .near.data, align 1
     36          uint8_t LED7CodeL[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, 0x73, 0x40};
   \                     LED7CodeL:
   \   000000 3F 06 5B 4F  DC8 63, 6, 91, 79, 102, 109, 125, 7, 127, 111, 119, 124, 57, 94, 121
   \          66 6D 7D 07 
   \   00000F 71 73 40     DC8 113, 115, 64
     37          
     38          /* Private function prototypes -----------------------------------------------*/

   \                                 In section .near.bss, align 1
     39          int TEM_SUM;
   \                     TEM_SUM:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     40          u8 FAN_PWM_NUM;
   \                     FAN_PWM_NUM:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     41          bool LED_STATUS, TEM_STATUS, CONFIG_STATUS;
   \                     LED_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     TEM_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     CONFIG_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     42          bool SYSTEM_RUN, DS18B20_CONVERT_STATUS, HF_STATUS;
   \                     SYSTEM_RUN:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     DS18B20_CONVERT_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     HF_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     43          bool IT_HF_STATUS;
   \                     IT_HF_STATUS:
   \   000000              DS8 1
     44          // btn[0] ‰∏∫ÂêØÂä®/ÂÅúÊ≠¢ÊåâÈíÆ, btn[1] ËÆæÁΩÆÊåâÈíÆ, btn[2] +ÊåâÈíÆÔºå btn[3] -ÊåâÈíÆ, btn[4] Á°ÆÂÆö/ÁÅØÂÖâÊåâÈíÆ.

   \                                 In section .near.data, align 1
     45          u8 btn[] = {0x44, 0x4c, 0x54, 0x5c, 0x64};
   \                     btn:
   \   000000 44 4C 54 5C  DC8 68, 76, 84, 92, 100
   \          64          
     46          

   \                                 In section .far_func.text, align 1
     47          void main(void)
     48          {
   \                     main:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
     49            /* Infinite loop */
     50            init();
   \   000007 8D ......    CALLF     init
     51            TIM2_Cmd(ENABLE);
   \   00000B A6 01        LD        A, #0x1
   \   00000D 8D ......    CALLF     TIM2_Cmd
     52            TIM1_Cmd(ENABLE);
   \   000011 A6 01        LD        A, #0x1
   \   000013 8D ......    CALLF     TIM1_Cmd
     53            tm1650_displayInit();
   \   000017 8D ......    CALLF     tm1650_displayInit
     54            delay_ms(100);
   \   00001B AE 0064      LDW       X, #0x64
   \   00001E 8D ......    CALLF     delay_ms
     55          
     56            // ËØªÂèñÊï∞ÊçÆ
     57            TEM_SUM = FLASH_DATA_TEM_SUM_READ();
   \   000022 8D ......    CALLF     FLASH_DATA_TEM_SUM_READ
   \   000026 CF ....      LDW       L:TEM_SUM, X
     58            FAN_PWM_NUM = FLASH_DATA_FAN_PWM_READ();
   \   000029 8D ......    CALLF     FLASH_DATA_FAN_PWM_READ
   \   00002D C7 ....      LD        L:FAN_PWM_NUM, A
     59            TEM_STATUS = FLASH_DATA_TEM_STATUS_READ();
   \   000030 8D ......    CALLF     FLASH_DATA_TEM_STATUS_READ
   \   000034 C7 ....      LD        L:TEM_STATUS, A
     60            LED_STATUS = FLASH_DATA_LED_STATUS_READ();
   \   000037 8D ......    CALLF     FLASH_DATA_LED_STATUS_READ
   \   00003B C7 ....      LD        L:LED_STATUS, A
     61            HF_STATUS = FLASH_DATA_HF_STATUS_READ();
   \   00003E 8D ......    CALLF     FLASH_DATA_HF_STATUS_READ
   \   000042 C7 ....      LD        L:HF_STATUS, A
     62          
     63            SYSTEM_RUN = TRUE;
   \   000045 35 01 ....   MOV       L:SYSTEM_RUN, #0x1
     64            DS18B20_CONVERT_STATUS = FALSE;
   \   000049 725F ....    CLR       L:DS18B20_CONVERT_STATUS
     65          
     66            TEM_LED_CL;
   \   00004D 721A 500A    BSET      L:0x500a, #0x5
   \   000051 721D 500A    BRES      L:0x500a, #0x6
     67          
     68            while (1)
     69            {
     70              // ÂêØÂä® DS18B20 ËøõË°åÊ∏©Â∫¶ËΩ¨Êç¢
     71              int SUM;
     72              if (!DS18B20_CONVERT_STATUS)
   \                     ??main_0:
   \   000055 C6 ....      LD        A, L:DS18B20_CONVERT_STATUS
   \   000058 4D           TNZ       A
   \   000059 27 03        JREQ      ??lb_0
   \   00005B CC ....      JP        L:??main_1
     73              {
     74                disableInterrupts();
   \                     ??lb_0:
   \   00005E 9B           SIM
     75          
     76                // ËΩ¨Êç¢Ê∏©Â∫¶
     77                while (!DS18B20_Init())
   \                     ??main_2:
   \   00005F 8D ......    CALLF     DS18B20_Init
   \   000063 A1 00        CP        A, #0x0
   \   000065 26 09        JRNE      L:??main_3
     78                {
     79                  delay_ms(10);
   \   000067 AE 000A      LDW       X, #0xa
   \   00006A 8D ......    CALLF     delay_ms
   \   00006E 20 EF        JRA       L:??main_2
     80                }
     81                ds18b20_Conver();
   \                     ??main_3:
   \   000070 8D ......    CALLF     ds18b20_Conver
     82                DS18B20_CONVERT_STATUS = TRUE;
   \   000074 35 01 ....   MOV       L:DS18B20_CONVERT_STATUS, #0x1
     83          
     84                // ËØªÂèñÊ∏©Â∫¶
     85                while (!DS18B20_Init())
   \                     ??main_4:
   \   000078 8D ......    CALLF     DS18B20_Init
   \   00007C A1 00        CP        A, #0x0
   \   00007E 26 09        JRNE      L:??main_5
     86                {
     87                  delay_ms(10);
   \   000080 AE 000A      LDW       X, #0xa
   \   000083 8D ......    CALLF     delay_ms
   \   000087 20 EF        JRA       L:??main_4
     88                };
     89                SUM = DS18B20_Convert_Get_Tem(DS18B20_Read());
   \                     ??main_5:
   \   000089 8D ......    CALLF     DS18B20_Read
   \   00008D 8D ......    CALLF     DS18B20_Convert_Get_Tem
   \   000091 BF ..        LDW       S:?w4, X
     90                delay_ms(5);
   \   000093 AE 0005      LDW       X, #0x5
   \   000096 8D ......    CALLF     delay_ms
     91          
     92                enableInterrupts();
   \   00009A 9A           RIM
     93          
     94                u8 x;
     95                if (!SYSTEM_RUN && x > 2)
   \   00009B C6 ....      LD        A, L:SYSTEM_RUN
   \   00009E 4D           TNZ       A
   \   00009F 27 03        JREQ      ??lb_1
   \   0000A1 CC ....      JP        L:??main_6
   \                     ??lb_1:
   \   0000A4 B6 ..        LD        A, S:?b10
   \   0000A6 A1 03        CP        A, #0x3
   \   0000A8 24 03        JRNC      ??lb_2
   \   0000AA CC ....      JP        L:??main_6
     96                {
     97                  // ÊòæÁ§∫Ê∏©Â∫¶
     98                  SUM = (SUM < -99) ? -99 : SUM;
   \                     ??lb_2:
   \   0000AD BE ..        LDW       X, S:?w4
   \   0000AF A3 FF9D      CPW       X, #0xffffffffffffff9d
   \   0000B2 2E 07        JRSGE     L:??main_7
   \   0000B4 AE FF9D      LDW       X, #0xff9d
   \   0000B7 BF ..        LDW       S:?w4, X
   \   0000B9 20 00        JRA       L:??main_8
     99                  if (SUM < 0)
   \                     ??main_7:
   \                     ??main_8:
   \   0000BB BE ..        LDW       X, S:?w4
   \   0000BD A3 0000      CPW       X, #0x0
   \   0000C0 2E 4C        JRSGE     L:??main_9
    100                  {
    101                    tm1650_displayW(0, 0x40);
   \   0000C2 35 40 ....   MOV       S:?b0, #0x40
   \   0000C6 4F           CLR       A
   \   0000C7 8D ......    CALLF     tm1650_displayW
    102                    SUM = ~SUM + 1;
   \   0000CB BE ..        LDW       X, S:?w4
   \   0000CD 53           CPLW      X
   \   0000CE BF ..        LDW       S:?w4, X
   \   0000D0 BE ..        LDW       X, S:?w4
   \   0000D2 5C           INCW      X
   \   0000D3 BF ..        LDW       S:?w4, X
    103                    tm1650_displayW(1, (LED7CodeL[SUM / 10 % 10]) | 0x80);
   \   0000D5 90AE 000A    LDW       Y, #0xa
   \   0000D9 BE ..        LDW       X, S:?w4
   \   0000DB 8D ......    CALLF     L:?sdiv16_x_x_y
   \   0000DF 90AE 000A    LDW       Y, #0xa
   \   0000E3 8D ......    CALLF     L:?smod16_y_x_y
   \   0000E7 93           LDW       X, Y
   \   0000E8 D6 ....      LD        A, (L:LED7CodeL,X)
   \   0000EB AA 80        OR        A, #0x80
   \   0000ED B7 ..        LD        S:?b0, A
   \   0000EF A6 01        LD        A, #0x1
   \   0000F1 8D ......    CALLF     tm1650_displayW
    104                    tm1650_displayW(2, LED7CodeL[SUM % 10]);
   \   0000F5 90AE 000A    LDW       Y, #0xa
   \   0000F9 BE ..        LDW       X, S:?w4
   \   0000FB 8D ......    CALLF     L:?smod16_y_x_y
   \   0000FF 93           LDW       X, Y
   \   000100 D6 ....      LD        A, (L:LED7CodeL,X)
   \   000103 B7 ..        LD        S:?b0, A
   \   000105 A6 02        LD        A, #0x2
   \   000107 8D ......    CALLF     tm1650_displayW
   \   00010B CC ....      JP        L:??main_6
    105                  }
    106                  else
    107                  {
    108                    SUM = (SUM > 999) ? 999 : SUM;
   \                     ??main_9:
   \   00010E BE ..        LDW       X, S:?w4
   \   000110 A3 03E8      CPW       X, #0x3e8
   \   000113 2F 07        JRSLT     L:??main_10
   \   000115 AE 03E7      LDW       X, #0x3e7
   \   000118 BF ..        LDW       S:?w4, X
   \   00011A 20 00        JRA       L:??main_11
    109                    if ((SUM / 100 % 100) == 0)
   \                     ??main_10:
   \                     ??main_11:
   \   00011C 90AE 0064    LDW       Y, #0x64
   \   000120 BE ..        LDW       X, S:?w4
   \   000122 8D ......    CALLF     L:?sdiv16_x_x_y
   \   000126 90AE 0064    LDW       Y, #0x64
   \   00012A 8D ......    CALLF     L:?smod16_y_x_y
   \   00012E 905D         TNZW      Y
   \   000130 26 09        JRNE      L:??main_12
    110                    {
    111                      tm1650_displayW(0, 0x00);
   \   000132 3F ..        CLR       S:?b0
   \   000134 4F           CLR       A
   \   000135 8D ......    CALLF     tm1650_displayW
   \   000139 20 1D        JRA       L:??main_13
    112                    }
    113                    else
    114                    {
    115                      tm1650_displayW(0, LED7CodeL[SUM / 100 % 100]);
   \                     ??main_12:
   \   00013B 90AE 0064    LDW       Y, #0x64
   \   00013F BE ..        LDW       X, S:?w4
   \   000141 8D ......    CALLF     L:?sdiv16_x_x_y
   \   000145 90AE 0064    LDW       Y, #0x64
   \   000149 8D ......    CALLF     L:?smod16_y_x_y
   \   00014D 93           LDW       X, Y
   \   00014E D6 ....      LD        A, (L:LED7CodeL,X)
   \   000151 B7 ..        LD        S:?b0, A
   \   000153 4F           CLR       A
   \   000154 8D ......    CALLF     tm1650_displayW
    116                    }
    117                    tm1650_displayW(1, (LED7CodeL[SUM / 10 % 10]) | 0x80);
   \                     ??main_13:
   \   000158 90AE 000A    LDW       Y, #0xa
   \   00015C BE ..        LDW       X, S:?w4
   \   00015E 8D ......    CALLF     L:?sdiv16_x_x_y
   \   000162 90AE 000A    LDW       Y, #0xa
   \   000166 8D ......    CALLF     L:?smod16_y_x_y
   \   00016A 93           LDW       X, Y
   \   00016B D6 ....      LD        A, (L:LED7CodeL,X)
   \   00016E AA 80        OR        A, #0x80
   \   000170 B7 ..        LD        S:?b0, A
   \   000172 A6 01        LD        A, #0x1
   \   000174 8D ......    CALLF     tm1650_displayW
    118                    tm1650_displayW(2, LED7CodeL[SUM % 10]);
   \   000178 90AE 000A    LDW       Y, #0xa
   \   00017C BE ..        LDW       X, S:?w4
   \   00017E 8D ......    CALLF     L:?smod16_y_x_y
   \   000182 93           LDW       X, Y
   \   000183 D6 ....      LD        A, (L:LED7CodeL,X)
   \   000186 B7 ..        LD        S:?b0, A
   \   000188 A6 02        LD        A, #0x2
   \   00018A 8D ......    CALLF     tm1650_displayW
    119                  }
    120                }
    121                x++;
   \                     ??main_6:
   \   00018E 3C ..        INC       S:?b10
    122                x = (x > 10) ? 0 : x;
   \   000190 B6 ..        LD        A, S:?b10
   \   000192 A1 0B        CP        A, #0xb
   \   000194 25 04        JRC       L:??main_14
   \   000196 3F ..        CLR       S:?b10
   \   000198 20 00        JRA       L:??main_1
    123              }
    124          
    125              // LED ÂºÄÂêØÁä∂ÊÄÅ
    126              if (LED_STATUS)
   \                     ??main_14:
   \                     ??main_1:
   \   00019A C6 ....      LD        A, L:LED_STATUS
   \   00019D 4D           TNZ       A
   \   00019E 27 06        JREQ      L:??main_15
    127              {
    128                LED_LED_EN;
   \   0001A0 7213 5000    BRES      L:0x5000, #0x1
   \   0001A4 20 04        JRA       L:??main_16
    129              }
    130              else
    131              {
    132                LED_LED_CL;
   \                     ??main_15:
   \   0001A6 7212 5000    BSET      L:0x5000, #0x1
    133              }
    134          
    135              // ÂºÄÂêØÂä†Ê∏©
    136              if (TEM_STATUS)
   \                     ??main_16:
   \   0001AA C6 ....      LD        A, L:TEM_STATUS
   \   0001AD 4D           TNZ       A
   \   0001AE 27 3F        JREQ      L:??main_17
    137              {
    138                if (SYSTEM_RUN)
   \   0001B0 C6 ....      LD        A, L:SYSTEM_RUN
   \   0001B3 4D           TNZ       A
   \   0001B4 27 09        JREQ      L:??main_18
    139                {
    140                  delay_ms(500);
   \   0001B6 AE 01F4      LDW       X, #0x1f4
   \   0001B9 8D ......    CALLF     delay_ms
   \   0001BD 20 21        JRA       L:??main_19
    141                }
    142                else
    143                {
    144                  if (SUM < TEM_SUM)
   \                     ??main_18:
   \   0001BF BE ..        LDW       X, S:?w4
   \   0001C1 C3 ....      CPW       X, L:TEM_SUM
   \   0001C4 2E 0E        JRSGE     L:??main_20
    145                  {
    146                    SW_EN;
   \   0001C6 7216 500A    BSET      L:0x500a, #0x3
    147                    TEM_LED_EN;
   \   0001CA 721B 500A    BRES      L:0x500a, #0x5
   \   0001CE 721C 500A    BSET      L:0x500a, #0x6
   \   0001D2 20 0C        JRA       L:??main_19
    148                  }
    149                  else
    150                  {
    151                    SW_CL;
   \                     ??main_20:
   \   0001D4 7217 500A    BRES      L:0x500a, #0x3
    152                    TEM_LED_CL;
   \   0001D8 721A 500A    BSET      L:0x500a, #0x5
   \   0001DC 721D 500A    BRES      L:0x500a, #0x6
    153                  }
    154                }
    155                FAN_LED_EN;
   \                     ??main_19:
   \   0001E0 721D 500F    BRES      L:0x500f, #0x6
    156                TIM2_SetCompare3(FAN_PWM_NUM);
   \   0001E4 C6 ....      LD        A, L:FAN_PWM_NUM
   \   0001E7 5F           CLRW      X
   \   0001E8 97           LD        XL, A
   \   0001E9 8D ......    CALLF     TIM2_SetCompare3
   \   0001ED 20 15        JRA       L:??main_21
    157              }
    158              else
    159              {
    160                SW_CL;
   \                     ??main_17:
   \   0001EF 7217 500A    BRES      L:0x500a, #0x3
    161                TEM_LED_CL;
   \   0001F3 721A 500A    BSET      L:0x500a, #0x5
   \   0001F7 721D 500A    BRES      L:0x500a, #0x6
    162                FAN_LED_CL;
   \   0001FB 721C 500F    BSET      L:0x500f, #0x6
    163                TIM2_SetCompare3(0);
   \   0001FF 5F           CLRW      X
   \   000200 8D ......    CALLF     TIM2_SetCompare3
    164              }
    165          
    166              SYSTEM_RUN = FALSE;
   \                     ??main_21:
   \   000204 725F ....    CLR       L:SYSTEM_RUN
    167          
    168              // Êç¢È£é
    169              if (HF_STATUS)
   \   000208 C6 ....      LD        A, L:HF_STATUS
   \   00020B 4D           TNZ       A
   \   00020C 27 25        JREQ      L:??main_22
    170              {
    171                if ((SUM - TEM_SUM) > 10 && !IT_HF_STATUS)
   \   00020E BE ..        LDW       X, S:?w4
   \   000210 72B0 ....    SUBW      X, L:TEM_SUM
   \   000214 A3 000B      CPW       X, #0xb
   \   000217 2F 0A        JRSLT     L:??main_23
   \   000219 C6 ....      LD        A, L:IT_HF_STATUS
   \   00021C 4D           TNZ       A
   \   00021D 26 04        JRNE      L:??main_23
    172                {
    173                  IT_HF_STATUS = TRUE;
   \   00021F 35 01 ....   MOV       L:IT_HF_STATUS, #0x1
    174                }
    175                if (IT_HF_STATUS)
   \                     ??main_23:
   \   000223 C6 ....      LD        A, L:IT_HF_STATUS
   \   000226 4D           TNZ       A
   \   000227 27 06        JREQ      L:??main_24
    176                {
    177                  HF_EN;
   \   000229 7214 5000    BSET      L:0x5000, #0x2
   \   00022D 20 04        JRA       L:??main_22
    178                }
    179                else
    180                {
    181                  HF_CL;
   \                     ??main_24:
   \   00022F 7215 5000    BRES      L:0x5000, #0x2
    182                }
    183              }
    184          
    185              // ÂåπÈÖçÊåâÈîÆ
    186              u8 KEY = tm1650_displaykeyR();
   \                     ??main_22:
   \   000233 8D ......    CALLF     tm1650_displaykeyR
   \   000237 B7 ..        LD        S:?b10, A
    187              btn_down(KEY);
   \   000239 B6 ..        LD        A, S:?b10
   \   00023B 8D ......    CALLF     btn_down
   \   00023F CC ....      JP        L:??main_0
   \   000242              REQUIRE _A_PC_ODR
   \   000242              REQUIRE _A_PA_ODR
   \   000242              REQUIRE _A_PD_ODR
    188            }
    189          }
    190          

   \                                 In section .far_func.text, align 1
    191          void assert_failed(u8 *file, u32 line)
    192          {
    193            /* User can add his own implementation to report the file name and line number,
    194               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    195          
    196            /* Infinite loop */
    197            // while (1)
    198            // {
    199            // }
    200          }
   \                     assert_failed:
   \   000000 87           RETF
    201          
    202          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  CONFIG_STATUS
       1  DS18B20_CONVERT_STATUS
       1  FAN_PWM_NUM
       1  HF_STATUS
       1  IT_HF_STATUS
      18  LED7CodeH
      18  LED7CodeL
       1  LED_STATUS
       1  SYSTEM_RUN
       1  TEM_STATUS
       2  TEM_SUM
       1  _A_PA_ODR
       1  _A_PC_ODR
       1  _A_PD_ODR
       1  assert_failed
       5  btn
     578  main

 
 579 bytes in section .far_func.text
  10 bytes in section .near.bss
  41 bytes in section .near.data
   3 bytes in section .near.noinit   (abs)
 
 579 bytes of CODE memory
  51 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: 259
