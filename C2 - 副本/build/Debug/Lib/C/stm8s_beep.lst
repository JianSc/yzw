###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 09/Jan/2024  17:40:22
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\Lib\C\stm8s_beep.c
#    Command line =  
#        -f
#        "e:\Nas\电路\保温箱\YZW-S8-EE22(Rev1.0)\C\build\Debug\Lib\C\stm8s_beep.args.txt"
#        (--silent -lCN .\build\Debug\Lib\C\stm8s_beep.lst -I d:/IAR/STM8 -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S003
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\Lib\C\stm8s_beep.o .\Lib\C\stm8s_beep.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\Lib\C\stm8s_beep.lst
#    Object file  =  .\build\Debug\Lib\C\stm8s_beep.o
#
###############################################################################

e:\Nas\电路\保温箱\YZW-S8-EE22(Rev1.0)\C\Lib\C\stm8s_beep.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_beep.c
      4            * @author  MCD Application Team
      5            * @version V2.3.0
      6            * @date    16-June-2017
      7            * @brief   This file contains all the functions for the BEEP peripheral.
      8             ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "stm8s_beep.h"
     30          
     31          /** @addtogroup STM8S_StdPeriph_Driver
     32            * @{
     33            */
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          /* Private function prototypes -----------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          
     41          /* Public functions ----------------------------------------------------------*/
     42          
     43          /**
     44            * @addtogroup BEEP_Public_Functions
     45            * @{
     46            */
     47          
     48          /**
     49            * @brief  Deinitializes the BEEP peripheral registers to their default reset
     50            * values.
     51            * @param  None
     52            * @retval None
     53            */

   \                                 In section .far_func.text, align 1
     54          void BEEP_DeInit(void)
     55          {
     56            BEEP->CSR = BEEP_CSR_RESET_VALUE;
   \                     BEEP_DeInit:
   \   000000 35 1F 50F3   MOV       L:0x50f3, #0x1f
     57          }
   \   000004 87           RETF
     58          
     59          /**
     60            * @brief  Initializes the BEEP function according to the specified parameters.
     61            * @param   BEEP_Frequency Frequency selection.
     62            * can be one of the values of @ref BEEP_Frequency_TypeDef.
     63            * @retval None
     64            * @par Required preconditions:
     65            * The LS RC calibration must be performed before calling this function.
     66            */

   \                                 In section .far_func.text, align 1
     67          void BEEP_Init(BEEP_Frequency_TypeDef BEEP_Frequency)
     68          {
   \                     BEEP_Init:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
     69            /* Check parameter */
     70            assert_param(IS_BEEP_FREQUENCY_OK(BEEP_Frequency));
   \   000005 3D ..        TNZ       S:?b8
   \   000007 27 1B        JREQ      L:??BEEP_Init_0
   \   000009 B6 ..        LD        A, S:?b8
   \   00000B A1 40        CP        A, #0x40
   \   00000D 27 15        JREQ      L:??BEEP_Init_0
   \   00000F B6 ..        LD        A, S:?b8
   \   000011 A1 80        CP        A, #0x80
   \   000013 27 0F        JREQ      L:??BEEP_Init_0
   \   000015 AE 0046      LDW       X, #0x46
   \   000018 BF ..        LDW       S:?w1, X
   \   00001A 5F           CLRW      X
   \   00001B BF ..        LDW       S:?w0, X
   \   00001D AE ....      LDW       X, #?_0
   \   000020 8D ......    CALLF     assert_failed
     71            
     72            /* Set a default calibration value if no calibration is done */
     73            if ((BEEP->CSR & BEEP_CSR_BEEPDIV) == BEEP_CSR_BEEPDIV)
   \                     ??BEEP_Init_0:
   \   000024 C6 50F3      LD        A, L:0x50f3
   \   000027 A4 1F        AND       A, #0x1f
   \   000029 A1 1F        CP        A, #0x1f
   \   00002B 26 10        JRNE      L:??BEEP_Init_1
     74            {
     75              BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPDIV); /* Clear bits */
   \   00002D C6 50F3      LD        A, L:0x50f3
   \   000030 A4 E0        AND       A, #0xe0
   \   000032 C7 50F3      LD        L:0x50f3, A
     76              BEEP->CSR |= BEEP_CALIBRATION_DEFAULT;
   \   000035 C6 50F3      LD        A, L:0x50f3
   \   000038 AA 0B        OR        A, #0xb
   \   00003A C7 50F3      LD        L:0x50f3, A
     77            }
     78            
     79            /* Select the output frequency */
     80            BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPSEL);
   \                     ??BEEP_Init_1:
   \   00003D C6 50F3      LD        A, L:0x50f3
   \   000040 A4 3F        AND       A, #0x3f
   \   000042 C7 50F3      LD        L:0x50f3, A
     81            BEEP->CSR |= (uint8_t)(BEEP_Frequency);
   \   000045 C6 50F3      LD        A, L:0x50f3
   \   000048 BA ..        OR        A, S:?b8
   \   00004A C7 50F3      LD        L:0x50f3, A
     82          }
   \   00004D 32 ....      POP       S:?b8
   \   000050 87           RETF
     83          
     84          /**
     85            * @brief  Enable or disable the BEEP function.
     86            * @param   NewState Indicates the new state of the BEEP function.
     87            * @retval None
     88            * @par Required preconditions:
     89            * Initialisation of BEEP and LS RC calibration must be done before.
     90            */

   \                                 In section .far_func.text, align 1
     91          void BEEP_Cmd(FunctionalState NewState)
     92          {
     93            if (NewState != DISABLE)
   \                     BEEP_Cmd:
   \   000000 4D           TNZ       A
   \   000001 27 06        JREQ      L:??BEEP_Cmd_0
     94            {
     95              /* Enable the BEEP peripheral */
     96              BEEP->CSR |= BEEP_CSR_BEEPEN;
   \   000003 721A 50F3    BSET      L:0x50f3, #0x5
   \   000007 20 04        JRA       L:??BEEP_Cmd_1
     97            }
     98            else
     99            {
    100              /* Disable the BEEP peripheral */
    101              BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPEN);
   \                     ??BEEP_Cmd_0:
   \   000009 721B 50F3    BRES      L:0x50f3, #0x5
    102            }
    103          }
   \                     ??BEEP_Cmd_1:
   \   00000D 87           RETF
    104          
    105          /**
    106            * @brief  Update CSR register with the measured LSI frequency.
    107            * @par Note on the APR calculation:
    108            * A is the integer part of LSIFreqkHz/4 and x the decimal part.
    109            * x <= A/(1+2A) is equivalent to A >= x(1+2A) and also to 4A >= 4x(1+2A) [F1]
    110            * but we know that A + x = LSIFreqkHz/4 ==> 4x = LSIFreqkHz-4A
    111            * so [F1] can be written :
    112            * 4A >= (LSIFreqkHz-4A)(1+2A)
    113            * @param   LSIFreqHz Low Speed RC frequency measured by timer (in Hz).
    114            * @retval None
    115            * @par Required preconditions:
    116            * - BEEP must be disabled to avoid unwanted interrupts.
    117            */

   \                                 In section .far_func.text, align 1
    118          void BEEP_LSICalibrationConfig(uint32_t LSIFreqHz)
    119          {
   \                     BEEP_LSICalibrationConfig:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 8D ......    CALLF     L:?mov_l2_l0
    120            uint16_t lsifreqkhz;
    121            uint16_t A;
    122            
    123            /* Check parameter */
    124            assert_param(IS_LSI_FREQUENCY_OK(LSIFreqHz));
   \   00000C BE ..        LDW       X, S:?w4
   \   00000E A3 0001      CPW       X, #0x1
   \   000011 26 05        JRNE      L:??BEEP_LSICalibrationConfig_0
   \   000013 BE ..        LDW       X, S:?w5
   \   000015 A3 ADB0      CPW       X, #0xadb0
   \                     ??BEEP_LSICalibrationConfig_0:
   \   000018 25 0E        JRC       L:??BEEP_LSICalibrationConfig_1
   \   00001A BE ..        LDW       X, S:?w4
   \   00001C A3 0002      CPW       X, #0x2
   \   00001F 26 05        JRNE      L:??BEEP_LSICalibrationConfig_2
   \   000021 BE ..        LDW       X, S:?w5
   \   000023 A3 49F1      CPW       X, #0x49f1
   \                     ??BEEP_LSICalibrationConfig_2:
   \   000026 25 0F        JRC       L:??BEEP_LSICalibrationConfig_3
   \                     ??BEEP_LSICalibrationConfig_1:
   \   000028 AE 007C      LDW       X, #0x7c
   \   00002B BF ..        LDW       S:?w1, X
   \   00002D 5F           CLRW      X
   \   00002E BF ..        LDW       S:?w0, X
   \   000030 AE ....      LDW       X, #?_0
   \   000033 8D ......    CALLF     assert_failed
    125            
    126            lsifreqkhz = (uint16_t)(LSIFreqHz / 1000); /* Converts value in kHz */
   \                     ??BEEP_LSICalibrationConfig_3:
   \   000037 8D ......    CALLF     L:?mov_l0_l2
   \   00003B 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   00003F 000003E8     DC32      0x3e8
   \   000043 8D ......    CALLF     L:?mov_w7_w1
    127            
    128            /* Calculation of BEEPER calibration value */
    129            
    130            BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPDIV); /* Clear bits */
   \   000047 C6 50F3      LD        A, L:0x50f3
   \   00004A A4 E0        AND       A, #0xe0
   \   00004C C7 50F3      LD        L:0x50f3, A
    131            
    132            A = (uint16_t)(lsifreqkhz >> 3U); /* Division by 8, keep integer part only */
   \   00004F BE ..        LDW       X, S:?w7
   \   000051 54           SRLW      X
   \   000052 54           SRLW      X
   \   000053 54           SRLW      X
   \   000054 BF ..        LDW       S:?w6, X
    133            
    134            if ((8U * A) >= ((lsifreqkhz - (8U * A)) * (1U + (2U * A))))
   \   000056 AE 0008      LDW       X, #0x8
   \   000059 BF ..        LDW       S:?w0, X
   \   00005B BE ..        LDW       X, S:?w6
   \   00005D 8D ......    CALLF     L:?mul16_x_x_w0
   \   000061 BF ..        LDW       S:?w1, X
   \   000063 BE ..        LDW       X, S:?w7
   \   000065 72B0 ....    SUBW      X, S:?w1
   \   000069 9093         LDW       Y, X
   \   00006B BE ..        LDW       X, S:?w6
   \   00006D 58           SLLW      X
   \   00006E BF ..        LDW       S:?w0, X
   \   000070 BE ..        LDW       X, S:?w0
   \   000072 5C           INCW      X
   \   000073 BF ..        LDW       S:?w0, X
   \   000075 93           LDW       X, Y
   \   000076 8D ......    CALLF     L:?mul16_x_x_w0
   \   00007A BF ..        LDW       S:?w1, X
   \   00007C AE 0008      LDW       X, #0x8
   \   00007F BF ..        LDW       S:?w0, X
   \   000081 BE ..        LDW       X, S:?w6
   \   000083 8D ......    CALLF     L:?mul16_x_x_w0
   \   000087 B3 ..        CPW       X, S:?w1
   \   000089 25 0C        JRC       L:??BEEP_LSICalibrationConfig_4
    135            {
    136              BEEP->CSR |= (uint8_t)(A - 2U);
   \   00008B B6 ..        LD        A, S:?b13
   \   00008D 4A           DEC       A
   \   00008E 4A           DEC       A
   \   00008F CA 50F3      OR        A, L:0x50f3
   \   000092 C7 50F3      LD        L:0x50f3, A
   \   000095 20 09        JRA       L:??BEEP_LSICalibrationConfig_5
    137            }
    138            else
    139            {
    140              BEEP->CSR |= (uint8_t)(A - 1U);
   \                     ??BEEP_LSICalibrationConfig_4:
   \   000097 B6 ..        LD        A, S:?b13
   \   000099 4A           DEC       A
   \   00009A CA 50F3      OR        A, L:0x50f3
   \   00009D C7 50F3      LD        L:0x50f3, A
    141            }
    142          }
   \                     ??BEEP_LSICalibrationConfig_5:
   \   0000A0 AC ......    JPF       L:?epilogue_l2_l3

   \                                 In section .near.rodata, align 1
   \                     ?_0:
   \   000000 2E 5C 4C 69  DC8 ".\\Lib\\C\\stm8s_beep.c"
   \          62 5C 43 5C 
    143          
    144          /**
    145            * @}
    146            */
    147            
    148          /**
    149            * @}
    150            */
    151            
    152          
    153          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      21  ?_0
      14  BEEP_Cmd
       5  BEEP_DeInit
      81  BEEP_Init
     164  BEEP_LSICalibrationConfig

 
 264 bytes in section .far_func.text
  21 bytes in section .near.rodata
 
 264 bytes of CODE  memory
  21 bytes of CONST memory

Errors: none
Warnings: none
