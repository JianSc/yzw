###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 24/Jan/2024  16:39:11
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\Lib\C\stm8s_gpio.c
#    Command line =  
#        -f "e:\Nas\电路\保温箱\YZW-S803-EE22-
#        KF7620-分体\C\build\Debug\.obj\Lib\C\stm8s_gpio.args.txt" (--silent
#        -lCN .\build\Debug\.obj\Lib\C\stm8s_gpio.lst -I "d:/Program Files
#        (x86)/IAR Systems/STM8/stm8/lib" -I Lib/H -I Lib/C -I User -D STM8S003
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\.obj\Lib\C\stm8s_gpio.o .\Lib\C\stm8s_gpio.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\.obj\Lib\C\stm8s_gpio.lst
#    Object file  =  .\build\Debug\.obj\Lib\C\stm8s_gpio.o
#
###############################################################################

e:\Nas\电路\保温箱\YZW-S803-EE22- KF7620-分体\C\Lib\C\stm8s_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_gpio.c
      4            * @author  MCD Application Team
      5            * @version V2.3.0
      6            * @date    16-June-2017
      7            * @brief   This file contains all the functions for the GPIO peripheral.
      8             ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "stm8s_gpio.h"
     30          
     31          /** @addtogroup STM8S_StdPeriph_Driver
     32            * @{
     33            */
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          /* Private function prototypes -----------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          
     41          /* Public functions ----------------------------------------------------------*/
     42          
     43          /**
     44            * @addtogroup GPIO_Public_Functions
     45            * @{
     46            */
     47          
     48          /**
     49            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
     50            * @param  GPIOx: Select the GPIO peripheral number (x = A to I).
     51            * @retval None
     52            */

   \                                 In section .far_func.text, align 1
     53          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
     54          {
   \                     GPIO_DeInit:
   \   000000 9093         LDW       Y, X
     55            GPIOx->ODR = GPIO_ODR_RESET_VALUE; /* Reset Output Data Register */
   \   000002 907F         CLR       (Y)
     56            GPIOx->DDR = GPIO_DDR_RESET_VALUE; /* Reset Data Direction Register */
   \   000004 93           LDW       X, Y
   \   000005 5C           INCW      X
   \   000006 5C           INCW      X
   \   000007 7F           CLR       (X)
     57            GPIOx->CR1 = GPIO_CR1_RESET_VALUE; /* Reset Control Register 1 */
   \   000008 93           LDW       X, Y
   \   000009 1C 0003      ADDW      X, #0x3
   \   00000C 7F           CLR       (X)
     58            GPIOx->CR2 = GPIO_CR2_RESET_VALUE; /* Reset Control Register 2 */
   \   00000D 93           LDW       X, Y
   \   00000E 1C 0004      ADDW      X, #0x4
   \   000011 7F           CLR       (X)
     59          }
   \   000012 87           RETF
     60          
     61          /**
     62            * @brief  Initializes the GPIOx according to the specified parameters.
     63            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
     64            * @param  GPIO_Pin : This parameter contains the pin number, it can be any value
     65            *         of the @ref GPIO_Pin_TypeDef enumeration.
     66            * @param  GPIO_Mode : This parameter can be a value of the
     67            *         @ref GPIO_Mode_TypeDef enumeration.
     68            * @retval None
     69            */
     70          

   \                                 In section .far_func.text, align 1
     71          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, GPIO_Mode_TypeDef GPIO_Mode)
     72          {
   \                     GPIO_Init:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 BF ..        LDW       S:?w4, X
   \   000006 B7 ..        LD        S:?b11, A
   \   000008 45 .. ..     MOV       S:?b10, S:?b0
     73            /*----------------------*/
     74            /* Check the parameters */
     75            /*----------------------*/
     76            
     77            assert_param(IS_GPIO_MODE_OK(GPIO_Mode));
   \   00000B 3D ..        TNZ       S:?b10
   \   00000D 27 51        JREQ      L:??GPIO_Init_0
   \   00000F B6 ..        LD        A, S:?b10
   \   000011 A1 40        CP        A, #0x40
   \   000013 27 4B        JREQ      L:??GPIO_Init_0
   \   000015 B6 ..        LD        A, S:?b10
   \   000017 A1 20        CP        A, #0x20
   \   000019 27 45        JREQ      L:??GPIO_Init_0
   \   00001B B6 ..        LD        A, S:?b10
   \   00001D A1 60        CP        A, #0x60
   \   00001F 27 3F        JREQ      L:??GPIO_Init_0
   \   000021 B6 ..        LD        A, S:?b10
   \   000023 A1 A0        CP        A, #0xa0
   \   000025 27 39        JREQ      L:??GPIO_Init_0
   \   000027 B6 ..        LD        A, S:?b10
   \   000029 A1 E0        CP        A, #0xe0
   \   00002B 27 33        JREQ      L:??GPIO_Init_0
   \   00002D B6 ..        LD        A, S:?b10
   \   00002F A1 80        CP        A, #0x80
   \   000031 27 2D        JREQ      L:??GPIO_Init_0
   \   000033 B6 ..        LD        A, S:?b10
   \   000035 A1 C0        CP        A, #0xc0
   \   000037 27 27        JREQ      L:??GPIO_Init_0
   \   000039 B6 ..        LD        A, S:?b10
   \   00003B A1 B0        CP        A, #0xb0
   \   00003D 27 21        JREQ      L:??GPIO_Init_0
   \   00003F B6 ..        LD        A, S:?b10
   \   000041 A1 F0        CP        A, #0xf0
   \   000043 27 1B        JREQ      L:??GPIO_Init_0
   \   000045 B6 ..        LD        A, S:?b10
   \   000047 A1 90        CP        A, #0x90
   \   000049 27 15        JREQ      L:??GPIO_Init_0
   \   00004B B6 ..        LD        A, S:?b10
   \   00004D A1 D0        CP        A, #0xd0
   \   00004F 27 0F        JREQ      L:??GPIO_Init_0
   \   000051 AE 004D      LDW       X, #0x4d
   \   000054 BF ..        LDW       S:?w1, X
   \   000056 5F           CLRW      X
   \   000057 BF ..        LDW       S:?w0, X
   \   000059 AE ....      LDW       X, #?_0
   \   00005C 8D ......    CALLF     assert_failed
     78            assert_param(IS_GPIO_PIN_OK(GPIO_Pin));
   \                     ??GPIO_Init_0:
   \   000060 3D ..        TNZ       S:?b11
   \   000062 26 0F        JRNE      L:??GPIO_Init_1
   \   000064 AE 004E      LDW       X, #0x4e
   \   000067 BF ..        LDW       S:?w1, X
   \   000069 5F           CLRW      X
   \   00006A BF ..        LDW       S:?w0, X
   \   00006C AE ....      LDW       X, #?_0
   \   00006F 8D ......    CALLF     assert_failed
     79            
     80            /* Reset corresponding bit to GPIO_Pin in CR2 register */
     81            GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_1:
   \   000073 BE ..        LDW       X, S:?w4
   \   000075 1C 0004      ADDW      X, #0x4
   \   000078 B6 ..        LD        A, S:?b11
   \   00007A 43           CPL       A
   \   00007B F4           AND       A, (X)
   \   00007C BE ..        LDW       X, S:?w4
   \   00007E 1C 0004      ADDW      X, #0x4
   \   000081 F7           LD        (X), A
     82            
     83            /*-----------------------------*/
     84            /* Input/Output mode selection */
     85            /*-----------------------------*/
     86            
     87            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x80) != (uint8_t)0x00) /* Output mode */
   \   000082 B6 ..        LD        A, S:?b10
   \   000084 A4 80        AND       A, #0x80
   \   000086 A1 00        CP        A, #0x0
   \   000088 27 29        JREQ      L:??GPIO_Init_2
     88            {
     89              if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x10) != (uint8_t)0x00) /* High level */
   \   00008A B6 ..        LD        A, S:?b10
   \   00008C A4 10        AND       A, #0x10
   \   00008E A1 00        CP        A, #0x0
   \   000090 27 0A        JREQ      L:??GPIO_Init_3
     90              {
     91                GPIOx->ODR |= (uint8_t)GPIO_Pin;
   \   000092 92C6 ..      LD        A, [S:?w4.w]
   \   000095 BA ..        OR        A, S:?b11
   \   000097 92C7 ..      LD        [S:?w4.w], A
   \   00009A 20 09        JRA       L:??GPIO_Init_4
     92              } 
     93              else /* Low level */
     94              {
     95                GPIOx->ODR &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_3:
   \   00009C B6 ..        LD        A, S:?b11
   \   00009E 43           CPL       A
   \   00009F 92C4 ..      AND       A, [S:?w4.w]
   \   0000A2 92C7 ..      LD        [S:?w4.w], A
     96              }
     97              /* Set Output mode */
     98              GPIOx->DDR |= (uint8_t)GPIO_Pin;
   \                     ??GPIO_Init_4:
   \   0000A5 BE ..        LDW       X, S:?w4
   \   0000A7 5C           INCW      X
   \   0000A8 5C           INCW      X
   \   0000A9 F6           LD        A, (X)
   \   0000AA BA ..        OR        A, S:?b11
   \   0000AC BE ..        LDW       X, S:?w4
   \   0000AE 5C           INCW      X
   \   0000AF 5C           INCW      X
   \   0000B0 F7           LD        (X), A
   \   0000B1 20 0D        JRA       L:??GPIO_Init_5
     99            } 
    100            else /* Input mode */
    101            {
    102              /* Set Input mode */
    103              GPIOx->DDR &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_2:
   \   0000B3 BE ..        LDW       X, S:?w4
   \   0000B5 5C           INCW      X
   \   0000B6 5C           INCW      X
   \   0000B7 B6 ..        LD        A, S:?b11
   \   0000B9 43           CPL       A
   \   0000BA F4           AND       A, (X)
   \   0000BB BE ..        LDW       X, S:?w4
   \   0000BD 5C           INCW      X
   \   0000BE 5C           INCW      X
   \   0000BF F7           LD        (X), A
    104            }
    105            
    106            /*------------------------------------------------------------------------*/
    107            /* Pull-Up/Float (Input) or Push-Pull/Open-Drain (Output) modes selection */
    108            /*------------------------------------------------------------------------*/
    109            
    110            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x40) != (uint8_t)0x00) /* Pull-Up or Push-Pull */
   \                     ??GPIO_Init_5:
   \   0000C0 B6 ..        LD        A, S:?b10
   \   0000C2 A4 40        AND       A, #0x40
   \   0000C4 A1 00        CP        A, #0x0
   \   0000C6 27 10        JREQ      L:??GPIO_Init_6
    111            {
    112              GPIOx->CR1 |= (uint8_t)GPIO_Pin;
   \   0000C8 BE ..        LDW       X, S:?w4
   \   0000CA 1C 0003      ADDW      X, #0x3
   \   0000CD F6           LD        A, (X)
   \   0000CE BA ..        OR        A, S:?b11
   \   0000D0 BE ..        LDW       X, S:?w4
   \   0000D2 1C 0003      ADDW      X, #0x3
   \   0000D5 F7           LD        (X), A
   \   0000D6 20 0F        JRA       L:??GPIO_Init_7
    113            } 
    114            else /* Float or Open-Drain */
    115            {
    116              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_6:
   \   0000D8 BE ..        LDW       X, S:?w4
   \   0000DA 1C 0003      ADDW      X, #0x3
   \   0000DD B6 ..        LD        A, S:?b11
   \   0000DF 43           CPL       A
   \   0000E0 F4           AND       A, (X)
   \   0000E1 BE ..        LDW       X, S:?w4
   \   0000E3 1C 0003      ADDW      X, #0x3
   \   0000E6 F7           LD        (X), A
    117            }
    118            
    119            /*-----------------------------------------------------*/
    120            /* Interrupt (Input) or Slope (Output) modes selection */
    121            /*-----------------------------------------------------*/
    122            
    123            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x20) != (uint8_t)0x00) /* Interrupt or Slow slope */
   \                     ??GPIO_Init_7:
   \   0000E7 B6 ..        LD        A, S:?b10
   \   0000E9 A4 20        AND       A, #0x20
   \   0000EB A1 00        CP        A, #0x0
   \   0000ED 27 10        JREQ      L:??GPIO_Init_8
    124            {
    125              GPIOx->CR2 |= (uint8_t)GPIO_Pin;
   \   0000EF BE ..        LDW       X, S:?w4
   \   0000F1 1C 0004      ADDW      X, #0x4
   \   0000F4 F6           LD        A, (X)
   \   0000F5 BA ..        OR        A, S:?b11
   \   0000F7 BE ..        LDW       X, S:?w4
   \   0000F9 1C 0004      ADDW      X, #0x4
   \   0000FC F7           LD        (X), A
   \   0000FD 20 0F        JRA       L:??GPIO_Init_9
    126            } 
    127            else /* No external interrupt or No slope control */
    128            {
    129              GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_8:
   \   0000FF BE ..        LDW       X, S:?w4
   \   000101 1C 0004      ADDW      X, #0x4
   \   000104 B6 ..        LD        A, S:?b11
   \   000106 43           CPL       A
   \   000107 F4           AND       A, (X)
   \   000108 BE ..        LDW       X, S:?w4
   \   00010A 1C 0004      ADDW      X, #0x4
   \   00010D F7           LD        (X), A
    130            }
    131          }
   \                     ??GPIO_Init_9:
   \   00010E AC ......    JPF       L:?epilogue_l2
    132          
    133          /**
    134            * @brief  Writes data to the specified GPIO data port.
    135            * @note   The port must be configured in output mode.
    136            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    137            * @param  PortVal : Specifies the value to be written to the port output
    138            *         data register.
    139            * @retval None
    140            */

   \                                 In section .far_func.text, align 1
    141          void GPIO_Write(GPIO_TypeDef* GPIOx, uint8_t PortVal)
    142          {
    143            GPIOx->ODR = PortVal;
   \                     GPIO_Write:
   \   000000 F7           LD        (X), A
    144          }
   \   000001 87           RETF
    145          
    146          /**
    147            * @brief  Writes high level to the specified GPIO pins.
    148            * @note   The port must be configured in output mode.  
    149            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    150            * @param  PortPins : Specifies the pins to be turned high to the port output.
    151            *         data register.
    152            * @retval None
    153            */

   \                                 In section .far_func.text, align 1
    154          void GPIO_WriteHigh(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
    155          {
   \                     GPIO_WriteHigh:
   \   000000 B7 ..        LD        S:?b0, A
    156            GPIOx->ODR |= (uint8_t)PortPins;
   \   000002 F6           LD        A, (X)
   \   000003 BA ..        OR        A, S:?b0
   \   000005 F7           LD        (X), A
    157          }
   \   000006 87           RETF
    158          
    159          /**
    160            * @brief  Writes low level to the specified GPIO pins.
    161            * @note   The port must be configured in output mode.  
    162            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    163            * @param  PortPins : Specifies the pins to be turned low to the port output.
    164            *         data register.
    165            * @retval None
    166            */

   \                                 In section .far_func.text, align 1
    167          void GPIO_WriteLow(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
    168          {
   \                     GPIO_WriteLow:
   \   000000 B7 ..        LD        S:?b0, A
    169            GPIOx->ODR &= (uint8_t)(~PortPins);
   \   000002 B6 ..        LD        A, S:?b0
   \   000004 43           CPL       A
   \   000005 F4           AND       A, (X)
   \   000006 F7           LD        (X), A
    170          }
   \   000007 87           RETF
    171          
    172          /**
    173            * @brief  Writes reverse level to the specified GPIO pins.
    174            * @note   The port must be configured in output mode.
    175            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    176            * @param  PortPins : Specifies the pins to be reversed to the port output.
    177            *         data register.
    178            * @retval None
    179            */

   \                                 In section .far_func.text, align 1
    180          void GPIO_WriteReverse(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
    181          {
   \                     GPIO_WriteReverse:
   \   000000 B7 ..        LD        S:?b0, A
    182            GPIOx->ODR ^= (uint8_t)PortPins;
   \   000002 F6           LD        A, (X)
   \   000003 B8 ..        XOR       A, S:?b0
   \   000005 F7           LD        (X), A
    183          }
   \   000006 87           RETF
    184          
    185          /**
    186            * @brief  Reads the specified GPIO output data port.
    187            * @note   The port must be configured in input mode.  
    188            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    189            * @retval GPIO output data port value.
    190            */

   \                                 In section .far_func.text, align 1
    191          uint8_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    192          {
    193            return ((uint8_t)GPIOx->ODR);
   \                     GPIO_ReadOutputData:
   \   000000 F6           LD        A, (X)
   \   000001 87           RETF
    194          }
    195          
    196          /**
    197            * @brief  Reads the specified GPIO input data port.
    198            * @note   The port must be configured in input mode.   
    199            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    200            * @retval GPIO input data port value.
    201            */

   \                                 In section .far_func.text, align 1
    202          uint8_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    203          {
    204            return ((uint8_t)GPIOx->IDR);
   \                     GPIO_ReadInputData:
   \   000000 5C           INCW      X
   \   000001 F6           LD        A, (X)
   \   000002 87           RETF
    205          }
    206          
    207          /**
    208            * @brief  Reads the specified GPIO input data pin.
    209            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    210            * @param  GPIO_Pin : Specifies the pin number.
    211            * @retval BitStatus : GPIO input pin status.
    212            */

   \                                 In section .far_func.text, align 1
    213          BitStatus GPIO_ReadInputPin(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin)
    214          {
   \                     GPIO_ReadInputPin:
   \   000000 B7 ..        LD        S:?b0, A
    215            return ((BitStatus)(GPIOx->IDR & (uint8_t)GPIO_Pin));
   \   000002 5C           INCW      X
   \   000003 F6           LD        A, (X)
   \   000004 B4 ..        AND       A, S:?b0
   \   000006 87           RETF
    216          }
    217          
    218          /**
    219            * @brief  Configures the external pull-up on GPIOx pins.
    220            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    221            * @param  GPIO_Pin : Specifies the pin number
    222            * @param  NewState : The new state of the pull up pin.
    223            * @retval None
    224            */

   \                                 In section .far_func.text, align 1
    225          void GPIO_ExternalPullUpConfig(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, FunctionalState NewState)
    226          {
   \                     GPIO_ExternalPullUpConfig:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 BF ..        LDW       S:?w4, X
   \   000006 B7 ..        LD        S:?b11, A
   \   000008 45 .. ..     MOV       S:?b10, S:?b0
    227            /* Check the parameters */
    228            assert_param(IS_GPIO_PIN_OK(GPIO_Pin));
   \   00000B 3D ..        TNZ       S:?b11
   \   00000D 26 0F        JRNE      L:??GPIO_ExternalPullUpConfig_0
   \   00000F AE 00E4      LDW       X, #0xe4
   \   000012 BF ..        LDW       S:?w1, X
   \   000014 5F           CLRW      X
   \   000015 BF ..        LDW       S:?w0, X
   \   000017 AE ....      LDW       X, #?_0
   \   00001A 8D ......    CALLF     assert_failed
    229            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
   \                     ??GPIO_ExternalPullUpConfig_0:
   \   00001E 3D ..        TNZ       S:?b10
   \   000020 27 15        JREQ      L:??GPIO_ExternalPullUpConfig_1
   \   000022 B6 ..        LD        A, S:?b10
   \   000024 A1 01        CP        A, #0x1
   \   000026 27 0F        JREQ      L:??GPIO_ExternalPullUpConfig_1
   \   000028 AE 00E5      LDW       X, #0xe5
   \   00002B BF ..        LDW       S:?w1, X
   \   00002D 5F           CLRW      X
   \   00002E BF ..        LDW       S:?w0, X
   \   000030 AE ....      LDW       X, #?_0
   \   000033 8D ......    CALLF     assert_failed
    230            
    231            if (NewState != DISABLE) /* External Pull-Up Set*/
   \                     ??GPIO_ExternalPullUpConfig_1:
   \   000037 3D ..        TNZ       S:?b10
   \   000039 27 10        JREQ      L:??GPIO_ExternalPullUpConfig_2
    232            {
    233              GPIOx->CR1 |= (uint8_t)GPIO_Pin;
   \   00003B BE ..        LDW       X, S:?w4
   \   00003D 1C 0003      ADDW      X, #0x3
   \   000040 F6           LD        A, (X)
   \   000041 BA ..        OR        A, S:?b11
   \   000043 BE ..        LDW       X, S:?w4
   \   000045 1C 0003      ADDW      X, #0x3
   \   000048 F7           LD        (X), A
   \   000049 20 0F        JRA       L:??GPIO_ExternalPullUpConfig_3
    234            } else /* External Pull-Up Reset*/
    235            {
    236              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_ExternalPullUpConfig_2:
   \   00004B BE ..        LDW       X, S:?w4
   \   00004D 1C 0003      ADDW      X, #0x3
   \   000050 B6 ..        LD        A, S:?b11
   \   000052 43           CPL       A
   \   000053 F4           AND       A, (X)
   \   000054 BE ..        LDW       X, S:?w4
   \   000056 1C 0003      ADDW      X, #0x3
   \   000059 F7           LD        (X), A
    237            }
    238          }
   \                     ??GPIO_ExternalPullUpConfig_3:
   \   00005A AC ......    JPF       L:?epilogue_l2

   \                                 In section .near.rodata, align 1
   \                     ?_0:
   \   000000 2E 5C 4C 69  DC8 ".\\Lib\\C\\stm8s_gpio.c"
   \          62 5C 43 5C 
    239          
    240          /**
    241            * @}
    242            */
    243            
    244          /**
    245            * @}
    246            */
    247            
    248          
    249          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      21  ?_0
      19  GPIO_DeInit
      94  GPIO_ExternalPullUpConfig
     274  GPIO_Init
       3  GPIO_ReadInputData
       7  GPIO_ReadInputPin
       2  GPIO_ReadOutputData
       2  GPIO_Write
       7  GPIO_WriteHigh
       8  GPIO_WriteLow
       7  GPIO_WriteReverse

 
 423 bytes in section .far_func.text
  21 bytes in section .near.rodata
 
 423 bytes of CODE  memory
  21 bytes of CONST memory

Errors: none
Warnings: none
