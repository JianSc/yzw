###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 19/Jan/2024  20:42:43
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\Lib\C\stm8s_wwdg.c
#    Command line =  
#        -f "e:\Nas\电路\保温箱\YZW-S805-EE22(Rev1.0) -
#        KF7620\C\build\Debug\.obj\Lib\C\stm8s_wwdg.args.txt" (--silent -lCN
#        .\build\Debug\.obj\Lib\C\stm8s_wwdg.lst -I d:/IAR/STM8/stm8/inc -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S005
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\.obj\Lib\C\stm8s_wwdg.o .\Lib\C\stm8s_wwdg.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\.obj\Lib\C\stm8s_wwdg.lst
#    Object file  =  .\build\Debug\.obj\Lib\C\stm8s_wwdg.o
#
###############################################################################

e:\Nas\电路\保温箱\YZW-S805-EE22(Rev1.0) - KF7620\C\Lib\C\stm8s_wwdg.c
      1          /**
      2            ********************************************************************************
      3            * @file    stm8s_wwdg.c
      4            * @author  MCD Application Team
      5            * @version V2.3.0
      6            * @date    16-June-2017
      7            * @brief   This file contains all the functions for the WWDG peripheral.
      8             ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "stm8s_wwdg.h"
     30          
     31          /** @addtogroup STM8S_StdPeriph_Driver
     32            * @{
     33            */
     34          /* Private define ------------------------------------------------------------*/
     35          #define BIT_MASK          ((uint8_t)0x7F)
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          /* Private function prototypes -----------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          
     41          /** @addtogroup WWDG_Public_Functions
     42            * @{
     43            */
     44          
     45          /**
     46            * @brief  Initializes the WWDG peripheral.
     47            *         This function set Window Register = WindowValue, Counter Register
     48            *         according to Counter and \b ENABLE \b WWDG
     49            * @param  Counter : WWDG counter value
     50            * @param  WindowValue : specifies the WWDG Window Register, range is 0x00 to 0x7F.
     51            * @retval None
     52            */

   \                                 In section .far_func.text, align 1
     53          void WWDG_Init(uint8_t Counter, uint8_t WindowValue)
     54          {
   \                     WWDG_Init:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 B7 ..        LD        S:?b8, A
   \   000006 45 .. ..     MOV       S:?b9, S:?b0
     55            /* Check the parameters */
     56            assert_param(IS_WWDG_WINDOWLIMITVALUE_OK(WindowValue));
   \   000009 B6 ..        LD        A, S:?b9
   \   00000B A1 80        CP        A, #0x80
   \   00000D 25 0F        JRC       L:??WWDG_Init_0
   \   00000F AE 0038      LDW       X, #0x38
   \   000012 BF ..        LDW       S:?w1, X
   \   000014 5F           CLRW      X
   \   000015 BF ..        LDW       S:?w0, X
   \   000017 AE ....      LDW       X, #?_0
   \   00001A 8D ......    CALLF     assert_failed
     57            
     58            WWDG->WR = WWDG_WR_RESET_VALUE;
   \                     ??WWDG_Init_0:
   \   00001E 35 7F 50D2   MOV       L:0x50d2, #0x7f
     59            WWDG->CR = (uint8_t)((uint8_t)(WWDG_CR_WDGA | WWDG_CR_T6) | (uint8_t)Counter);
   \   000022 B6 ..        LD        A, S:?b8
   \   000024 AA C0        OR        A, #0xc0
   \   000026 C7 50D1      LD        L:0x50d1, A
     60            WWDG->WR = (uint8_t)((uint8_t)(~WWDG_CR_WDGA) & (uint8_t)(WWDG_CR_T6 | WindowValue));
   \   000029 B6 ..        LD        A, S:?b9
   \   00002B AA 40        OR        A, #0x40
   \   00002D A4 7F        AND       A, #0x7f
   \   00002F C7 50D2      LD        L:0x50d2, A
     61          }
   \   000032 AC ......    JPF       L:?epilogue_w4
     62          
     63          /**
     64            * @brief  Refreshes the WWDG peripheral.
     65            * @param  Counter :  WWDG Counter Value
     66            *         This parameter must be a number between 0x40 and 0x7F.
     67            * @retval None
     68            */

   \                                 In section .far_func.text, align 1
     69          void WWDG_SetCounter(uint8_t Counter)
     70          {
   \                     WWDG_SetCounter:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
     71            /* Check the parameters */
     72            assert_param(IS_WWDG_COUNTERVALUE_OK(Counter));
   \   000005 B6 ..        LD        A, S:?b8
   \   000007 A1 80        CP        A, #0x80
   \   000009 25 0F        JRC       L:??WWDG_SetCounter_0
   \   00000B AE 0048      LDW       X, #0x48
   \   00000E BF ..        LDW       S:?w1, X
   \   000010 5F           CLRW      X
   \   000011 BF ..        LDW       S:?w0, X
   \   000013 AE ....      LDW       X, #?_0
   \   000016 8D ......    CALLF     assert_failed
     73            
     74            /* Write to T[6:0] bits to configure the counter value, no need to do
     75            a read-modify-write; writing a 0 to WDGA bit does nothing */
     76            WWDG->CR = (uint8_t)(Counter & (uint8_t)BIT_MASK);
   \                     ??WWDG_SetCounter_0:
   \   00001A B6 ..        LD        A, S:?b8
   \   00001C A4 7F        AND       A, #0x7f
   \   00001E C7 50D1      LD        L:0x50d1, A
     77          }
   \   000021 32 ....      POP       S:?b8
   \   000024 87           RETF
     78          
     79          /**
     80            * @brief Gets the WWDG Counter Value.
     81            *        This value could be used to check if WWDG is in the window, where
     82            *        refresh is allowed.
     83            * @param  None
     84            * @retval WWDG Counter Value
     85            */

   \                                 In section .far_func.text, align 1
     86          uint8_t WWDG_GetCounter(void)
     87          {
     88            return(WWDG->CR);
   \                     WWDG_GetCounter:
   \   000000 C6 50D1      LD        A, L:0x50d1
   \   000003 87           RETF
     89          }
     90          
     91          /**
     92            * @brief  Generates immediate WWDG RESET.
     93            * @param  None
     94            * @retval None
     95            */

   \                                 In section .far_func.text, align 1
     96          void WWDG_SWReset(void)
     97          {
     98            WWDG->CR = WWDG_CR_WDGA; /* Activate WWDG, with clearing T6 */
   \                     WWDG_SWReset:
   \   000000 35 80 50D1   MOV       L:0x50d1, #0x80
     99          }
   \   000004 87           RETF
    100          
    101          /**
    102            * @brief  Sets the WWDG window value.
    103            * @param  WindowValue: specifies the window value to be compared to the
    104            *         downcounter.
    105            *         This parameter value must be lower than 0x80.
    106            * @retval None
    107            */

   \                                 In section .far_func.text, align 1
    108          void WWDG_SetWindowValue(uint8_t WindowValue)
    109          {
   \                     WWDG_SetWindowValue:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    110            /* Check the parameters */
    111            assert_param(IS_WWDG_WINDOWLIMITVALUE_OK(WindowValue));
   \   000005 B6 ..        LD        A, S:?b8
   \   000007 A1 80        CP        A, #0x80
   \   000009 25 0F        JRC       L:??WWDG_SetWindowValue_0
   \   00000B AE 006F      LDW       X, #0x6f
   \   00000E BF ..        LDW       S:?w1, X
   \   000010 5F           CLRW      X
   \   000011 BF ..        LDW       S:?w0, X
   \   000013 AE ....      LDW       X, #?_0
   \   000016 8D ......    CALLF     assert_failed
    112            
    113            WWDG->WR = (uint8_t)((uint8_t)(~WWDG_CR_WDGA) & (uint8_t)(WWDG_CR_T6 | WindowValue));
   \                     ??WWDG_SetWindowValue_0:
   \   00001A B6 ..        LD        A, S:?b8
   \   00001C AA 40        OR        A, #0x40
   \   00001E A4 7F        AND       A, #0x7f
   \   000020 C7 50D2      LD        L:0x50d2, A
    114          }
   \   000023 32 ....      POP       S:?b8
   \   000026 87           RETF

   \                                 In section .near.rodata, align 1
   \                     ?_0:
   \   000000 2E 5C 4C 69  DC8 ".\\Lib\\C\\stm8s_wwdg.c"
   \          62 5C 43 5C 
    115          
    116          /**
    117            * @}
    118            */
    119            
    120          /**
    121            * @}
    122            */
    123            
    124          
    125          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      21  ?_0
       4  WWDG_GetCounter
      54  WWDG_Init
       5  WWDG_SWReset
      37  WWDG_SetCounter
      39  WWDG_SetWindowValue

 
 139 bytes in section .far_func.text
  21 bytes in section .near.rodata
 
 139 bytes of CODE  memory
  21 bytes of CONST memory

Errors: none
Warnings: none
