###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 19/Jan/2024  20:42:43
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\Lib\C\stm8s_itc.c
#    Command line =  
#        -f "e:\Nas\电路\保温箱\YZW-S805-EE22(Rev1.0) -
#        KF7620\C\build\Debug\.obj\Lib\C\stm8s_itc.args.txt" (--silent -lCN
#        .\build\Debug\.obj\Lib\C\stm8s_itc.lst -I d:/IAR/STM8/stm8/inc -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S005
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\.obj\Lib\C\stm8s_itc.o .\Lib\C\stm8s_itc.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\.obj\Lib\C\stm8s_itc.lst
#    Object file  =  .\build\Debug\.obj\Lib\C\stm8s_itc.o
#
###############################################################################

e:\Nas\电路\保温箱\YZW-S805-EE22(Rev1.0) - KF7620\C\Lib\C\stm8s_itc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_itc.c
      4            * @author  MCD Application Team
      5            * @version V2.3.0
      6            * @date    16-June-2017
      7            * @brief   This file contains all the functions for the ITC peripheral.
      8             ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "stm8s_itc.h"
     30          
     31          /** @addtogroup STM8S_StdPeriph_Driver
     32            * @{
     33            */
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          /* Private function prototypes -----------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          
     41          /** @addtogroup ITC_Private_Functions
     42            * @{
     43            */
     44          
     45          /**
     46            * @brief  Utility function used to read CC register.
     47            * @param  None
     48            * @retval CPU CC register value
     49            */

   \                                 In section .far_func.text, align 1
     50          uint8_t ITC_GetCPUCC(void)
     51          {
     52          #ifdef _COSMIC_
     53            _asm("push cc");
     54            _asm("pop a");
     55            return; /* Ignore compiler warning, the returned value is in A register */
     56          #elif defined _RAISONANCE_ /* _RAISONANCE_ */
     57            return _getCC_();
     58          #else /* _IAR_ */
     59            asm("push cc");
   \                     ITC_GetCPUCC:
   \   000000 8A           push cc
     60            asm("pop a"); /* Ignore compiler warning, the returned value is in A register */
   \   000001 84           pop a
     61          #endif /* _COSMIC_*/
     62          }
   \   000002 87           RETF
     63          
     64          
     65          /**
     66            * @}
     67            */
     68          
     69          /* Public functions ----------------------------------------------------------*/
     70          
     71          /** @addtogroup ITC_Public_Functions
     72            * @{
     73            */
     74          
     75          /**
     76            * @brief  Deinitializes the ITC registers to their default reset value.
     77            * @param  None
     78            * @retval None
     79            */

   \                                 In section .far_func.text, align 1
     80          void ITC_DeInit(void)
     81          {
     82            ITC->ISPR1 = ITC_SPRX_RESET_VALUE;
   \                     ITC_DeInit:
   \   000000 35 FF 7F70   MOV       L:0x7f70, #0xff
     83            ITC->ISPR2 = ITC_SPRX_RESET_VALUE;
   \   000004 35 FF 7F71   MOV       L:0x7f71, #0xff
     84            ITC->ISPR3 = ITC_SPRX_RESET_VALUE;
   \   000008 35 FF 7F72   MOV       L:0x7f72, #0xff
     85            ITC->ISPR4 = ITC_SPRX_RESET_VALUE;
   \   00000C 35 FF 7F73   MOV       L:0x7f73, #0xff
     86            ITC->ISPR5 = ITC_SPRX_RESET_VALUE;
   \   000010 35 FF 7F74   MOV       L:0x7f74, #0xff
     87            ITC->ISPR6 = ITC_SPRX_RESET_VALUE;
   \   000014 35 FF 7F75   MOV       L:0x7f75, #0xff
     88            ITC->ISPR7 = ITC_SPRX_RESET_VALUE;
   \   000018 35 FF 7F76   MOV       L:0x7f76, #0xff
     89            ITC->ISPR8 = ITC_SPRX_RESET_VALUE;
   \   00001C 35 FF 7F77   MOV       L:0x7f77, #0xff
     90          }
   \   000020 87           RETF
     91          
     92          /**
     93            * @brief  Gets the interrupt software priority bits (I1, I0) value from CPU CC register.
     94            * @param  None
     95            * @retval The interrupt software priority bits value.
     96            */

   \                                 In section .far_func.text, align 1
     97          uint8_t ITC_GetSoftIntStatus(void)
     98          {
     99            return (uint8_t)(ITC_GetCPUCC() & CPU_CC_I1I0);
   \                     ITC_GetSoftIntStatus:
   \   000000 8D ......    CALLF     ITC_GetCPUCC
   \   000004 A4 28        AND       A, #0x28
   \   000006 87           RETF
    100          }
    101          
    102          /**
    103            * @brief  Gets the software priority of the specified interrupt source.
    104            * @param  IrqNum : Specifies the peripheral interrupt source.
    105            * @retval ITC_PriorityLevel_TypeDef : Specifies the software priority of the interrupt source.
    106            */

   \                                 In section .far_func.text, align 1
    107          ITC_PriorityLevel_TypeDef ITC_GetSoftwarePriority(ITC_Irq_TypeDef IrqNum)
    108          {
   \                     ITC_GetSoftwarePriority:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
   \   000007 B7 ..        LD        S:?b9, A
    109            uint8_t Value = 0;
   \   000009 3F ..        CLR       S:?b8
    110            uint8_t Mask = 0;
   \   00000B 3F ..        CLR       S:?b10
    111            
    112            /* Check function parameters */
    113            assert_param(IS_ITC_IRQ_OK((uint8_t)IrqNum));
   \   00000D B6 ..        LD        A, S:?b9
   \   00000F A1 19        CP        A, #0x19
   \   000011 25 0F        JRC       L:??ITC_GetSoftwarePriority_0
   \   000013 AE 0071      LDW       X, #0x71
   \   000016 BF ..        LDW       S:?w1, X
   \   000018 5F           CLRW      X
   \   000019 BF ..        LDW       S:?w0, X
   \   00001B AE ....      LDW       X, #?_0
   \   00001E 8D ......    CALLF     assert_failed
    114            
    115            /* Define the mask corresponding to the bits position in the SPR register */
    116            Mask = (uint8_t)(0x03U << (((uint8_t)IrqNum % 4U) * 2U));
   \                     ??ITC_GetSoftwarePriority_0:
   \   000022 B6 ..        LD        A, S:?b9
   \   000024 A4 03        AND       A, #0x3
   \   000026 AE 0002      LDW       X, #0x2
   \   000029 42           MUL       X, A
   \   00002A 9F           LD        A, XL
   \   00002B AE 0003      LDW       X, #0x3
   \   00002E 8D ......    CALLF     L:?sll16_x_x_a
   \   000032 9F           LD        A, XL
   \   000033 B7 ..        LD        S:?b10, A
    117            
    118            switch (IrqNum)
   \   000035 B6 ..        LD        A, S:?b9
   \   000037 4D           TNZ       A
   \   000038 27 40        JREQ      L:??ITC_GetSoftwarePriority_1
   \   00003A 4A           DEC       A
   \   00003B 27 3D        JREQ      L:??ITC_GetSoftwarePriority_1
   \   00003D 4A           DEC       A
   \   00003E 27 3A        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000040 4A           DEC       A
   \   000041 27 37        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000043 4A           DEC       A
   \   000044 27 3D        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000046 4A           DEC       A
   \   000047 27 3A        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000049 4A           DEC       A
   \   00004A 27 37        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00004C 4A           DEC       A
   \   00004D 27 34        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00004F A0 03        SUB       A, #0x3
   \   000051 27 39        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000053 4A           DEC       A
   \   000054 27 36        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000056 4A           DEC       A
   \   000057 27 3C        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000059 4A           DEC       A
   \   00005A 27 39        JREQ      L:??ITC_GetSoftwarePriority_4
   \   00005C 4A           DEC       A
   \   00005D 27 36        JREQ      L:??ITC_GetSoftwarePriority_4
   \   00005F 4A           DEC       A
   \   000060 27 33        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000062 4A           DEC       A
   \   000063 27 39        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000065 A0 03        SUB       A, #0x3
   \   000067 27 35        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000069 4A           DEC       A
   \   00006A 27 3B        JREQ      L:??ITC_GetSoftwarePriority_6
   \   00006C 4A           DEC       A
   \   00006D 27 38        JREQ      L:??ITC_GetSoftwarePriority_6
   \   00006F 4A           DEC       A
   \   000070 27 35        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000072 4A           DEC       A
   \   000073 27 32        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000075 4A           DEC       A
   \   000076 27 38        JREQ      L:??ITC_GetSoftwarePriority_7
   \   000078 20 3F        JRA       L:??ITC_GetSoftwarePriority_8
    119            {
    120            case ITC_IRQ_TLI: /* TLI software priority can be read but has no meaning */
    121            case ITC_IRQ_AWU:
    122            case ITC_IRQ_CLK:
    123            case ITC_IRQ_PORTA:
    124              Value = (uint8_t)(ITC->ISPR1 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_1:
   \   00007A C6 7F70      LD        A, L:0x7f70
   \   00007D B4 ..        AND       A, S:?b10
   \   00007F B7 ..        LD        S:?b8, A
    125              break;
   \   000081 20 36        JRA       L:??ITC_GetSoftwarePriority_9
    126          
    127            case ITC_IRQ_PORTB:
    128            case ITC_IRQ_PORTC:
    129            case ITC_IRQ_PORTD:
    130            case ITC_IRQ_PORTE:
    131              Value = (uint8_t)(ITC->ISPR2 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_2:
   \   000083 C6 7F71      LD        A, L:0x7f71
   \   000086 B4 ..        AND       A, S:?b10
   \   000088 B7 ..        LD        S:?b8, A
    132              break;
   \   00008A 20 2D        JRA       L:??ITC_GetSoftwarePriority_9
    133          
    134          #if defined(STM8S208) || defined(STM8AF52Ax)
    135            case ITC_IRQ_CAN_RX:
    136            case ITC_IRQ_CAN_TX:
    137          #endif /*STM8S208 or STM8AF52Ax */
    138          #if defined(STM8S903) || defined(STM8AF622x)
    139            case ITC_IRQ_PORTF:
    140          #endif /*STM8S903 or STM8AF622x */
    141            case ITC_IRQ_SPI:
    142            case ITC_IRQ_TIM1_OVF:
    143              Value = (uint8_t)(ITC->ISPR3 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_3:
   \   00008C C6 7F72      LD        A, L:0x7f72
   \   00008F B4 ..        AND       A, S:?b10
   \   000091 B7 ..        LD        S:?b8, A
    144              break;
   \   000093 20 24        JRA       L:??ITC_GetSoftwarePriority_9
    145          
    146            case ITC_IRQ_TIM1_CAPCOM:
    147          #if defined (STM8S903) || defined (STM8AF622x)
    148            case ITC_IRQ_TIM5_OVFTRI:
    149            case ITC_IRQ_TIM5_CAPCOM:
    150          #else
    151            case ITC_IRQ_TIM2_OVF:
    152            case ITC_IRQ_TIM2_CAPCOM:
    153          #endif /* STM8S903 or STM8AF622x*/
    154            case ITC_IRQ_TIM3_OVF:
    155              Value = (uint8_t)(ITC->ISPR4 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_4:
   \   000095 C6 7F73      LD        A, L:0x7f73
   \   000098 B4 ..        AND       A, S:?b10
   \   00009A B7 ..        LD        S:?b8, A
    156              break;
   \   00009C 20 1B        JRA       L:??ITC_GetSoftwarePriority_9
    157          
    158            case ITC_IRQ_TIM3_CAPCOM:
    159          #if defined(STM8S208) ||defined(STM8S207) || defined (STM8S007) || defined(STM8S103) || \
    160              defined(STM8S003) ||defined(STM8S001) || defined (STM8S903) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    161            case ITC_IRQ_UART1_TX:
    162            case ITC_IRQ_UART1_RX:
    163          #endif /*STM8S208 or STM8S207 or STM8S007 or STM8S103 or STM8S003 or STM8S001 or STM8S903 or STM8AF52Ax or STM8AF62Ax */ 
    164          #if defined(STM8AF622x)
    165            case ITC_IRQ_UART4_TX:
    166            case ITC_IRQ_UART4_RX:
    167          #endif /*STM8AF622x */
    168            case ITC_IRQ_I2C:
    169              Value = (uint8_t)(ITC->ISPR5 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_5:
   \   00009E C6 7F74      LD        A, L:0x7f74
   \   0000A1 B4 ..        AND       A, S:?b10
   \   0000A3 B7 ..        LD        S:?b8, A
    170              break;
   \   0000A5 20 12        JRA       L:??ITC_GetSoftwarePriority_9
    171          
    172          #if defined(STM8S105) || defined(STM8S005) || defined(STM8AF626x)
    173            case ITC_IRQ_UART2_TX:
    174            case ITC_IRQ_UART2_RX:
    175          #endif /*STM8S105 or STM8AF626x*/
    176          #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
    177              defined(STM8AF62Ax)
    178            case ITC_IRQ_UART3_TX:
    179            case ITC_IRQ_UART3_RX:
    180            case ITC_IRQ_ADC2:
    181          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    182          #if defined(STM8S105) || defined(STM8S005) || defined(STM8S103) || defined(STM8S003) || \
    183              defined(STM8S001) || defined(STM8S903) || defined(STM8AF626x) || defined(STM8AF622x)
    184            case ITC_IRQ_ADC1:
    185          #endif /*STM8S105, STM8S005, STM8S103 or STM8S003 or STM8S001 or STM8S903 or STM8AF626x or STM8AF622x */
    186          #if defined (STM8S903) || defined (STM8AF622x)
    187            case ITC_IRQ_TIM6_OVFTRI:
    188          #else
    189            case ITC_IRQ_TIM4_OVF:
    190          #endif /*STM8S903 or STM8AF622x */
    191              Value = (uint8_t)(ITC->ISPR6 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_6:
   \   0000A7 C6 7F75      LD        A, L:0x7f75
   \   0000AA B4 ..        AND       A, S:?b10
   \   0000AC B7 ..        LD        S:?b8, A
    192              break;
   \   0000AE 20 09        JRA       L:??ITC_GetSoftwarePriority_9
    193          
    194            case ITC_IRQ_EEPROM_EEC:
    195              Value = (uint8_t)(ITC->ISPR7 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_7:
   \   0000B0 C6 7F76      LD        A, L:0x7f76
   \   0000B3 B4 ..        AND       A, S:?b10
   \   0000B5 B7 ..        LD        S:?b8, A
    196              break;
   \   0000B7 20 00        JRA       L:??ITC_GetSoftwarePriority_9
    197          
    198            default:
    199              break;
    200            }
    201            
    202            Value >>= (uint8_t)(((uint8_t)IrqNum % 4u) * 2u);
   \                     ??ITC_GetSoftwarePriority_8:
   \                     ??ITC_GetSoftwarePriority_9:
   \   0000B9 B6 ..        LD        A, S:?b9
   \   0000BB A4 03        AND       A, #0x3
   \   0000BD AE 0002      LDW       X, #0x2
   \   0000C0 42           MUL       X, A
   \   0000C1 41           EXG       A, XL
   \   0000C2 B7 ..        LD        S:?b0, A
   \   0000C4 41           EXG       A, XL
   \   0000C5 B6 ..        LD        A, S:?b8
   \   0000C7 8D ......    CALLF     L:?srl8_a_a_b0
   \   0000CB B7 ..        LD        S:?b8, A
    203            
    204            return((ITC_PriorityLevel_TypeDef)Value);
   \   0000CD B6 ..        LD        A, S:?b8
   \   0000CF 32 ....      POP       S:?b10
   \   0000D2 AC ......    JPF       L:?epilogue_w4
    205          }
    206          
    207          /**
    208            * @brief  Sets the software priority of the specified interrupt source.
    209            * @note   - The modification of the software priority is only possible when
    210            *         the interrupts are disabled.
    211            *         - The normal behavior is to disable the interrupt before calling
    212            *         this function, and re-enable it after.
    213            *         - The priority level 0 cannot be set (see product specification
    214            *         for more details).
    215            * @param  IrqNum : Specifies the peripheral interrupt source.
    216            * @param  PriorityValue : Specifies the software priority value to set,
    217            *         can be a value of @ref  ITC_PriorityLevel_TypeDef .
    218            * @retval None
    219          */

   \                                 In section .far_func.text, align 1
    220          void ITC_SetSoftwarePriority(ITC_Irq_TypeDef IrqNum, ITC_PriorityLevel_TypeDef PriorityValue)
    221          {
   \                     ITC_SetSoftwarePriority:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 B7 ..        LD        S:?b8, A
   \   000006 45 .. ..     MOV       S:?b9, S:?b0
    222            uint8_t Mask = 0;
   \   000009 3F ..        CLR       S:?b10
    223            uint8_t NewPriority = 0;
   \   00000B 3F ..        CLR       S:?b11
    224            
    225            /* Check function parameters */
    226            assert_param(IS_ITC_IRQ_OK((uint8_t)IrqNum));
   \   00000D B6 ..        LD        A, S:?b8
   \   00000F A1 19        CP        A, #0x19
   \   000011 25 0F        JRC       L:??ITC_SetSoftwarePriority_0
   \   000013 AE 00E2      LDW       X, #0xe2
   \   000016 BF ..        LDW       S:?w1, X
   \   000018 5F           CLRW      X
   \   000019 BF ..        LDW       S:?w0, X
   \   00001B AE ....      LDW       X, #?_0
   \   00001E 8D ......    CALLF     assert_failed
    227            assert_param(IS_ITC_PRIORITY_OK(PriorityValue));
   \                     ??ITC_SetSoftwarePriority_0:
   \   000022 B6 ..        LD        A, S:?b9
   \   000024 A1 02        CP        A, #0x2
   \   000026 27 1F        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000028 B6 ..        LD        A, S:?b9
   \   00002A A1 01        CP        A, #0x1
   \   00002C 27 19        JREQ      L:??ITC_SetSoftwarePriority_1
   \   00002E 3D ..        TNZ       S:?b9
   \   000030 27 15        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000032 B6 ..        LD        A, S:?b9
   \   000034 A1 03        CP        A, #0x3
   \   000036 27 0F        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000038 AE 00E3      LDW       X, #0xe3
   \   00003B BF ..        LDW       S:?w1, X
   \   00003D 5F           CLRW      X
   \   00003E BF ..        LDW       S:?w0, X
   \   000040 AE ....      LDW       X, #?_0
   \   000043 8D ......    CALLF     assert_failed
    228            
    229            /* Check if interrupts are disabled */
    230            assert_param(IS_ITC_INTERRUPTS_DISABLED);
   \                     ??ITC_SetSoftwarePriority_1:
   \   000047 8D ......    CALLF     ITC_GetSoftIntStatus
   \   00004B A1 28        CP        A, #0x28
   \   00004D 27 0F        JREQ      L:??ITC_SetSoftwarePriority_2
   \   00004F AE 00E6      LDW       X, #0xe6
   \   000052 BF ..        LDW       S:?w1, X
   \   000054 5F           CLRW      X
   \   000055 BF ..        LDW       S:?w0, X
   \   000057 AE ....      LDW       X, #?_0
   \   00005A 8D ......    CALLF     assert_failed
    231            
    232            /* Define the mask corresponding to the bits position in the SPR register */
    233            /* The mask is reversed in order to clear the 2 bits after more easily */
    234            Mask = (uint8_t)(~(uint8_t)(0x03U << (((uint8_t)IrqNum % 4U) * 2U)));
   \                     ??ITC_SetSoftwarePriority_2:
   \   00005E B6 ..        LD        A, S:?b8
   \   000060 A4 03        AND       A, #0x3
   \   000062 AE 0002      LDW       X, #0x2
   \   000065 42           MUL       X, A
   \   000066 9F           LD        A, XL
   \   000067 AE 0003      LDW       X, #0x3
   \   00006A 8D ......    CALLF     L:?sll16_x_x_a
   \   00006E 9F           LD        A, XL
   \   00006F 43           CPL       A
   \   000070 B7 ..        LD        S:?b10, A
    235            
    236            /* Define the new priority to write */
    237            NewPriority = (uint8_t)((uint8_t)(PriorityValue) << (((uint8_t)IrqNum % 4U) * 2U));
   \   000072 B6 ..        LD        A, S:?b8
   \   000074 A4 03        AND       A, #0x3
   \   000076 AE 0002      LDW       X, #0x2
   \   000079 42           MUL       X, A
   \   00007A 41           EXG       A, XL
   \   00007B B7 ..        LD        S:?b0, A
   \   00007D 41           EXG       A, XL
   \   00007E 5F           CLRW      X
   \   00007F B6 ..        LD        A, S:?b9
   \   000081 97           LD        XL, A
   \   000082 B6 ..        LD        A, S:?b0
   \   000084 8D ......    CALLF     L:?sll16_x_x_a
   \   000088 9F           LD        A, XL
   \   000089 B7 ..        LD        S:?b11, A
    238            
    239            switch (IrqNum)
   \   00008B B6 ..        LD        A, S:?b8
   \   00008D 4D           TNZ       A
   \   00008E 27 40        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000090 4A           DEC       A
   \   000091 27 3D        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000093 4A           DEC       A
   \   000094 27 3A        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000096 4A           DEC       A
   \   000097 27 37        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000099 4A           DEC       A
   \   00009A 27 46        JREQ      L:??ITC_SetSoftwarePriority_4
   \   00009C 4A           DEC       A
   \   00009D 27 43        JREQ      L:??ITC_SetSoftwarePriority_4
   \   00009F 4A           DEC       A
   \   0000A0 27 40        JREQ      L:??ITC_SetSoftwarePriority_4
   \   0000A2 4A           DEC       A
   \   0000A3 27 3D        JREQ      L:??ITC_SetSoftwarePriority_4
   \   0000A5 A0 03        SUB       A, #0x3
   \   0000A7 27 4B        JREQ      L:??ITC_SetSoftwarePriority_5
   \   0000A9 4A           DEC       A
   \   0000AA 27 48        JREQ      L:??ITC_SetSoftwarePriority_5
   \   0000AC 4A           DEC       A
   \   0000AD 27 57        JREQ      L:??ITC_SetSoftwarePriority_6
   \   0000AF 4A           DEC       A
   \   0000B0 27 54        JREQ      L:??ITC_SetSoftwarePriority_6
   \   0000B2 4A           DEC       A
   \   0000B3 27 51        JREQ      L:??ITC_SetSoftwarePriority_6
   \   0000B5 4A           DEC       A
   \   0000B6 27 4E        JREQ      L:??ITC_SetSoftwarePriority_6
   \   0000B8 4A           DEC       A
   \   0000B9 27 5D        JREQ      L:??ITC_SetSoftwarePriority_7
   \   0000BB A0 03        SUB       A, #0x3
   \   0000BD 27 59        JREQ      L:??ITC_SetSoftwarePriority_7
   \   0000BF 4A           DEC       A
   \   0000C0 27 68        JREQ      L:??ITC_SetSoftwarePriority_8
   \   0000C2 4A           DEC       A
   \   0000C3 27 65        JREQ      L:??ITC_SetSoftwarePriority_8
   \   0000C5 4A           DEC       A
   \   0000C6 27 62        JREQ      L:??ITC_SetSoftwarePriority_8
   \   0000C8 4A           DEC       A
   \   0000C9 27 5F        JREQ      L:??ITC_SetSoftwarePriority_8
   \   0000CB 4A           DEC       A
   \   0000CC 27 6E        JREQ      L:??ITC_SetSoftwarePriority_9
   \   0000CE 20 7E        JRA       L:??ITC_SetSoftwarePriority_10
    240            {
    241            case ITC_IRQ_TLI: /* TLI software priority can be written but has no meaning */
    242            case ITC_IRQ_AWU:
    243            case ITC_IRQ_CLK:
    244            case ITC_IRQ_PORTA:
    245              ITC->ISPR1 &= Mask;
   \                     ??ITC_SetSoftwarePriority_3:
   \   0000D0 C6 7F70      LD        A, L:0x7f70
   \   0000D3 B4 ..        AND       A, S:?b10
   \   0000D5 C7 7F70      LD        L:0x7f70, A
    246              ITC->ISPR1 |= NewPriority;
   \   0000D8 C6 7F70      LD        A, L:0x7f70
   \   0000DB BA ..        OR        A, S:?b11
   \   0000DD C7 7F70      LD        L:0x7f70, A
    247              break;
   \   0000E0 20 6C        JRA       L:??ITC_SetSoftwarePriority_11
    248              
    249            case ITC_IRQ_PORTB:
    250            case ITC_IRQ_PORTC:
    251            case ITC_IRQ_PORTD:
    252            case ITC_IRQ_PORTE:
    253              ITC->ISPR2 &= Mask;
   \                     ??ITC_SetSoftwarePriority_4:
   \   0000E2 C6 7F71      LD        A, L:0x7f71
   \   0000E5 B4 ..        AND       A, S:?b10
   \   0000E7 C7 7F71      LD        L:0x7f71, A
    254              ITC->ISPR2 |= NewPriority;
   \   0000EA C6 7F71      LD        A, L:0x7f71
   \   0000ED BA ..        OR        A, S:?b11
   \   0000EF C7 7F71      LD        L:0x7f71, A
    255              break;
   \   0000F2 20 5A        JRA       L:??ITC_SetSoftwarePriority_11
    256              
    257          #if defined(STM8S208) || defined(STM8AF52Ax)
    258            case ITC_IRQ_CAN_RX:
    259            case ITC_IRQ_CAN_TX:
    260          #endif /*STM8S208 or STM8AF52Ax */
    261          #if defined(STM8S903) || defined(STM8AF622x)
    262            case ITC_IRQ_PORTF:
    263          #endif /*STM8S903 or STM8AF622x */
    264            case ITC_IRQ_SPI:
    265            case ITC_IRQ_TIM1_OVF:
    266              ITC->ISPR3 &= Mask;
   \                     ??ITC_SetSoftwarePriority_5:
   \   0000F4 C6 7F72      LD        A, L:0x7f72
   \   0000F7 B4 ..        AND       A, S:?b10
   \   0000F9 C7 7F72      LD        L:0x7f72, A
    267              ITC->ISPR3 |= NewPriority;
   \   0000FC C6 7F72      LD        A, L:0x7f72
   \   0000FF BA ..        OR        A, S:?b11
   \   000101 C7 7F72      LD        L:0x7f72, A
    268              break;
   \   000104 20 48        JRA       L:??ITC_SetSoftwarePriority_11
    269              
    270            case ITC_IRQ_TIM1_CAPCOM:
    271          #if defined(STM8S903) || defined(STM8AF622x) 
    272            case ITC_IRQ_TIM5_OVFTRI:
    273            case ITC_IRQ_TIM5_CAPCOM:
    274          #else
    275            case ITC_IRQ_TIM2_OVF:
    276            case ITC_IRQ_TIM2_CAPCOM:
    277          #endif /*STM8S903 or STM8AF622x */
    278            case ITC_IRQ_TIM3_OVF:
    279              ITC->ISPR4 &= Mask;
   \                     ??ITC_SetSoftwarePriority_6:
   \   000106 C6 7F73      LD        A, L:0x7f73
   \   000109 B4 ..        AND       A, S:?b10
   \   00010B C7 7F73      LD        L:0x7f73, A
    280              ITC->ISPR4 |= NewPriority;
   \   00010E C6 7F73      LD        A, L:0x7f73
   \   000111 BA ..        OR        A, S:?b11
   \   000113 C7 7F73      LD        L:0x7f73, A
    281              break;
   \   000116 20 36        JRA       L:??ITC_SetSoftwarePriority_11
    282              
    283            case ITC_IRQ_TIM3_CAPCOM:
    284          #if defined(STM8S208) ||defined(STM8S207) || defined (STM8S007) || defined(STM8S103) || \
    285              defined(STM8S001) ||defined(STM8S003) ||defined(STM8S903) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    286            case ITC_IRQ_UART1_TX:
    287            case ITC_IRQ_UART1_RX:
    288          #endif /*STM8S208 or STM8S207 or STM8S007 or STM8S103 or STM8S003 or STM8S001 or STM8S903 or STM8AF52Ax or STM8AF62Ax */ 
    289          #if defined(STM8AF622x)
    290            case ITC_IRQ_UART4_TX:
    291            case ITC_IRQ_UART4_RX:
    292          #endif /*STM8AF622x */
    293            case ITC_IRQ_I2C:
    294              ITC->ISPR5 &= Mask;
   \                     ??ITC_SetSoftwarePriority_7:
   \   000118 C6 7F74      LD        A, L:0x7f74
   \   00011B B4 ..        AND       A, S:?b10
   \   00011D C7 7F74      LD        L:0x7f74, A
    295              ITC->ISPR5 |= NewPriority;
   \   000120 C6 7F74      LD        A, L:0x7f74
   \   000123 BA ..        OR        A, S:?b11
   \   000125 C7 7F74      LD        L:0x7f74, A
    296              break;
   \   000128 20 24        JRA       L:??ITC_SetSoftwarePriority_11
    297              
    298          #if defined(STM8S105) || defined(STM8S005) || defined(STM8AF626x)
    299            case ITC_IRQ_UART2_TX:
    300            case ITC_IRQ_UART2_RX:
    301          #endif /*STM8S105 or STM8AF626x */
    302              
    303          #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
    304              defined(STM8AF62Ax)
    305            case ITC_IRQ_UART3_TX:
    306            case ITC_IRQ_UART3_RX:
    307            case ITC_IRQ_ADC2:
    308          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    309              
    310          #if defined(STM8S105) || defined(STM8S005) || defined(STM8S103) || defined(STM8S003) || \
    311              defined(STM8S001) || defined(STM8S903) || defined(STM8AF626x) || defined (STM8AF622x)
    312            case ITC_IRQ_ADC1:
    313          #endif /*STM8S105, STM8S005, STM8S103 or STM8S003 or STM8S001 or STM8S903 or STM8AF626x or STM8AF622x */
    314              
    315          #if defined (STM8S903) || defined (STM8AF622x)
    316            case ITC_IRQ_TIM6_OVFTRI:
    317          #else
    318            case ITC_IRQ_TIM4_OVF:
    319          #endif /* STM8S903 or STM8AF622x */
    320              ITC->ISPR6 &= Mask;
   \                     ??ITC_SetSoftwarePriority_8:
   \   00012A C6 7F75      LD        A, L:0x7f75
   \   00012D B4 ..        AND       A, S:?b10
   \   00012F C7 7F75      LD        L:0x7f75, A
    321              ITC->ISPR6 |= NewPriority;
   \   000132 C6 7F75      LD        A, L:0x7f75
   \   000135 BA ..        OR        A, S:?b11
   \   000137 C7 7F75      LD        L:0x7f75, A
    322              break;
   \   00013A 20 12        JRA       L:??ITC_SetSoftwarePriority_11
    323              
    324            case ITC_IRQ_EEPROM_EEC:
    325              ITC->ISPR7 &= Mask;
   \                     ??ITC_SetSoftwarePriority_9:
   \   00013C C6 7F76      LD        A, L:0x7f76
   \   00013F B4 ..        AND       A, S:?b10
   \   000141 C7 7F76      LD        L:0x7f76, A
    326              ITC->ISPR7 |= NewPriority;
   \   000144 C6 7F76      LD        A, L:0x7f76
   \   000147 BA ..        OR        A, S:?b11
   \   000149 C7 7F76      LD        L:0x7f76, A
    327              break;
   \   00014C 20 00        JRA       L:??ITC_SetSoftwarePriority_11
    328              
    329            default:
    330              break;
    331            }
    332          }
   \                     ??ITC_SetSoftwarePriority_10:
   \                     ??ITC_SetSoftwarePriority_11:
   \   00014E AC ......    JPF       L:?epilogue_l2

   \                                 In section .near.rodata, align 1
   \                     ?_0:
   \   000000 2E 5C 4C 69  DC8 ".\\Lib\\C\\stm8s_itc.c"
   \          62 5C 43 5C 
    333          
    334          /**
    335            * @}
    336            */
    337            
    338          /**
    339            * @}
    340            */
    341            
    342          
    343          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?_0
      33  ITC_DeInit
       3  ITC_GetCPUCC
       7  ITC_GetSoftIntStatus
     214  ITC_GetSoftwarePriority
     338  ITC_SetSoftwarePriority

 
 595 bytes in section .far_func.text
  20 bytes in section .near.rodata
 
 595 bytes of CODE  memory
  20 bytes of CONST memory

Errors: none
Warnings: 1
