###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 19/Jan/2024  20:42:47
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\User\main.c
#    Command line =  
#        -f "e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S805-EE22(Rev1.0) -
#        KF7620\C\build\Debug\.obj\User\main.args.txt" (--silent -lCN
#        .\build\Debug\.obj\User\main.lst -I d:/IAR/STM8/stm8/inc -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S005
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\.obj\User\main.o .\User\main.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\.obj\User\main.lst
#    Object file  =  .\build\Debug\.obj\User\main.o
#
###############################################################################

e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S805-EE22(Rev1.0) - KF7620\C\User\main.c
      1          /**
      2           ******************************************************************************
      3           * @file    Project/main.c
      4           * @author  MCD Application Team
      5           * @version V2.3.0
      6           * @date    16-June-2017
      7           * @brief   Main program body
      8           ******************************************************************************
      9           * @attention
     10           *
     11           * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12           *
     13           * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14           * You may not use this file except in compliance with the License.
     15           * You may obtain a copy of the License at:
     16           *
     17           *        http://www.st.com/software_license_agreement_liberty_v2
     18           *
     19           * Unless required by applicable law or agreed to in writing, software
     20           * distributed under the License is distributed on an "AS IS" BASIS,
     21           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22           * See the License for the specific language governing permissions and
     23           * limitations under the License.
     24           *
     25           ******************************************************************************
     26           */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "init.h"

   \                                 In section .near.noinit, at 0x5000
   \   union <unnamed> volatile _A_PA_ODR
   \                     _A_PA_ODR:
   \   000000              DS8 1

   \                                 In section .near.noinit, at 0x500a
   \   union <unnamed> volatile _A_PC_ODR
   \                     _A_PC_ODR:
   \   000000              DS8 1

   \                                 In section .near.noinit, at 0x500f
   \   union <unnamed> volatile _A_PD_ODR
   \                     _A_PD_ODR:
   \   000000              DS8 1
     30          
     31          /* Private defines -----------------------------------------------------------*/
     32          
     33          // TODO:TM1650-LEDÁ†Å	   0	 1		2     3     4     5    6     7     8     9     A     B     C     D     E     F	  P 	-
     34          // LED7codeH ÂÖ±Èò≥ , LED7codeL ÂÖ±Èò¥

   \                                 In section .near.data, align 1
     35          uint8_t LED7CodeH[] = {~0x3f, ~0x06, ~0x5b, ~0x4f, ~0x66, ~0x6d, ~0x7d, ~0x07, ~0x7f, ~0x6f, ~0x77, ~0x7c, ~0x39, ~0x5e, ~0x79, ~0x71, ~0x73, ~0x40};
   \                     LED7CodeH:
   \   000000 C0 F9 A4 B0  DC8 192, 249, 164, 176, 153, 146, 130, 248, 128, 144, 136, 131, 198
   \          99 92 82 F8 
   \   00000D A1 86 8E 8C  DC8 161, 134, 142, 140, 191
   \          BF          

   \                                 In section .near.data, align 1
     36          uint8_t LED7CodeL[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, 0x73, 0x40};
   \                     LED7CodeL:
   \   000000 3F 06 5B 4F  DC8 63, 6, 91, 79, 102, 109, 125, 7, 127, 111, 119, 124, 57, 94, 121
   \          66 6D 7D 07 
   \   00000F 71 73 40     DC8 113, 115, 64
     37          
     38          /* Private function prototypes -----------------------------------------------*/

   \                                 In section .near.bss, align 1
     39          int TEM_SUM;
   \                     TEM_SUM:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     40          u8 FAN_PWM_NUM;
   \                     FAN_PWM_NUM:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     41          bool LED_STATUS, TEM_STATUS, CONFIG_STATUS;
   \                     LED_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     TEM_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     CONFIG_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     42          bool SYSTEM_RUN, DS18B20_CONVERT_STATUS, HF_STATUS, MSD_STATUS, MSD_TIME_STATUS;
   \                     SYSTEM_RUN:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     DS18B20_CONVERT_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     HF_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     MSD_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     MSD_TIME_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     43          bool IT_HF_STATUS;
   \                     IT_HF_STATUS:
   \   000000              DS8 1
     44          // btn[0] ‰∏∫ÂêØÂä®/ÂÅúÊ≠¢ÊåâÈíÆ, btn[1] ËÆæÁΩÆÊåâÈíÆ, btn[2] +ÊåâÈíÆÔºå btn[3] -ÊåâÈíÆ, btn[4] Á°ÆÂÆö/ÁÅØÂÖâÊåâÈíÆ.

   \                                 In section .near.data, align 1
     45          u8 btn[] = {0x44, 0x4c, 0x54, 0x5c, 0x64};
   \                     btn:
   \   000000 44 4C 54 5C  DC8 68, 76, 84, 92, 100
   \          64          
     46          

   \                                 In section .far_func.text, align 1
     47          void main(void)
     48          {
   \                     main:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
     49            /* Infinite loop */
     50            init();
   \   000007 8D ......    CALLF     init
     51            TIM2_Cmd(ENABLE);
   \   00000B A6 01        LD        A, #0x1
   \   00000D 8D ......    CALLF     TIM2_Cmd
     52            TIM1_Cmd(ENABLE);
   \   000011 A6 01        LD        A, #0x1
   \   000013 8D ......    CALLF     TIM1_Cmd
     53            tm1650_displayInit();
   \   000017 8D ......    CALLF     tm1650_displayInit
     54            delay_ms(100);
   \   00001B AE 0064      LDW       X, #0x64
   \   00001E 8D ......    CALLF     delay_ms
     55            MSD_STATUS = FALSE;
   \   000022 725F ....    CLR       L:MSD_STATUS
     56            MSD_TIME_STATUS = FALSE;
   \   000026 725F ....    CLR       L:MSD_TIME_STATUS
     57          
     58            // ËØªÂèñÊï∞ÊçÆ
     59            TEM_SUM = FLASH_DATA_TEM_SUM_READ();
   \   00002A 8D ......    CALLF     FLASH_DATA_TEM_SUM_READ
   \   00002E CF ....      LDW       L:TEM_SUM, X
     60            FAN_PWM_NUM = FLASH_DATA_FAN_PWM_READ();
   \   000031 8D ......    CALLF     FLASH_DATA_FAN_PWM_READ
   \   000035 C7 ....      LD        L:FAN_PWM_NUM, A
     61            TEM_STATUS = FLASH_DATA_TEM_STATUS_READ();
   \   000038 8D ......    CALLF     FLASH_DATA_TEM_STATUS_READ
   \   00003C C7 ....      LD        L:TEM_STATUS, A
     62            LED_STATUS = FLASH_DATA_LED_STATUS_READ();
   \   00003F 8D ......    CALLF     FLASH_DATA_LED_STATUS_READ
   \   000043 C7 ....      LD        L:LED_STATUS, A
     63            HF_STATUS = FLASH_DATA_HF_STATUS_READ();
   \   000046 8D ......    CALLF     FLASH_DATA_HF_STATUS_READ
   \   00004A C7 ....      LD        L:HF_STATUS, A
     64          
     65            SYSTEM_RUN = TRUE;
   \   00004D 35 01 ....   MOV       L:SYSTEM_RUN, #0x1
     66            DS18B20_CONVERT_STATUS = FALSE;
   \   000051 725F ....    CLR       L:DS18B20_CONVERT_STATUS
     67          
     68            TEM_LED_CL;
   \   000055 721A 500A    BSET      L:0x500a, #0x5
   \   000059 721D 500A    BRES      L:0x500a, #0x6
     69          
     70            while (1)
     71            {
     72              // ËøáÊ∏©Ê£ÄÊµãÔºåÂ¶ÇÊûúÊ∏©Â∫¶È´ò‰∫éËÆæÂÆöÁöÑ5Â∫¶ÔºåÂπ∂‰∏îÊåÅÁª≠30ÁßíÔºåÂ∞±ÂÖ≥Èó≠Âä†Ê∏©ÁªßÁîµÂô®
     73              if(MSD_TIME_STATUS)
   \                     ??main_0:
   \   00005D C6 ....      LD        A, L:MSD_TIME_STATUS
   \   000060 4D           TNZ       A
   \   000061 27 3A        JREQ      L:??main_1
     74              {
     75                MSD_CL;
   \   000063 7219 500A    BRES      L:0x500a, #0x4
     76                SW_CL;
   \   000067 7217 500A    BRES      L:0x500a, #0x3
     77                LED_STATUS = TRUE;
   \   00006B 35 01 ....   MOV       L:LED_STATUS, #0x1
     78                FAN_CL;
   \   00006F 7219 500A    BRES      L:0x500a, #0x4
     79                TEM_LED_CL;
   \   000073 721A 500A    BSET      L:0x500a, #0x5
   \   000077 721D 500A    BRES      L:0x500a, #0x6
     80                tm1650_displayW(0,LED7CodeL[14]);
   \   00007B 55 .... .... MOV       S:?b0, L:LED7CodeL + 14
   \   000080 4F           CLR       A
   \   000081 8D ......    CALLF     tm1650_displayW
     81                tm1650_displayW(1,LED7CodeL[1]);
   \   000085 55 .... .... MOV       S:?b0, L:LED7CodeL + 1
   \   00008A A6 01        LD        A, #0x1
   \   00008C 8D ......    CALLF     tm1650_displayW
     82                tm1650_displayW(2,LED7CodeL[0]);
   \   000090 55 .... .... MOV       S:?b0, L:LED7CodeL
   \   000095 A6 02        LD        A, #0x2
   \   000097 8D ......    CALLF     tm1650_displayW
     83          
     84                while(1);
   \                     ??main_2:
   \   00009B 20 FE        JRA       L:??main_2
     85              }
     86              // ÂêØÂä® DS18B20 ËøõË°åÊ∏©Â∫¶ËΩ¨Êç¢
     87              int SUM;
     88              if (!DS18B20_CONVERT_STATUS)
   \                     ??main_1:
   \   00009D C6 ....      LD        A, L:DS18B20_CONVERT_STATUS
   \   0000A0 4D           TNZ       A
   \   0000A1 27 03        JREQ      ??lb_0
   \   0000A3 CC ....      JP        L:??main_3
     89              {
     90                disableInterrupts();
   \                     ??lb_0:
   \   0000A6 9B           SIM
     91          
     92                // ËΩ¨Êç¢Ê∏©Â∫¶
     93                while (!DS18B20_Init())
   \                     ??main_4:
   \   0000A7 8D ......    CALLF     DS18B20_Init
   \   0000AB A1 00        CP        A, #0x0
   \   0000AD 26 09        JRNE      L:??main_5
     94                {
     95                  delay_ms(10);
   \   0000AF AE 000A      LDW       X, #0xa
   \   0000B2 8D ......    CALLF     delay_ms
   \   0000B6 20 EF        JRA       L:??main_4
     96                }
     97                ds18b20_Conver();
   \                     ??main_5:
   \   0000B8 8D ......    CALLF     ds18b20_Conver
     98                DS18B20_CONVERT_STATUS = TRUE;
   \   0000BC 35 01 ....   MOV       L:DS18B20_CONVERT_STATUS, #0x1
     99          
    100                // ËØªÂèñÊ∏©Â∫¶
    101                while (!DS18B20_Init())
   \                     ??main_6:
   \   0000C0 8D ......    CALLF     DS18B20_Init
   \   0000C4 A1 00        CP        A, #0x0
   \   0000C6 26 09        JRNE      L:??main_7
    102                {
    103                  delay_ms(10);
   \   0000C8 AE 000A      LDW       X, #0xa
   \   0000CB 8D ......    CALLF     delay_ms
   \   0000CF 20 EF        JRA       L:??main_6
    104                };
    105                SUM = DS18B20_Convert_Get_Tem(DS18B20_Read());
   \                     ??main_7:
   \   0000D1 8D ......    CALLF     DS18B20_Read
   \   0000D5 8D ......    CALLF     DS18B20_Convert_Get_Tem
   \   0000D9 BF ..        LDW       S:?w4, X
    106                delay_ms(5);
   \   0000DB AE 0005      LDW       X, #0x5
   \   0000DE 8D ......    CALLF     delay_ms
    107          
    108                enableInterrupts();
   \   0000E2 9A           RIM
    109          
    110                u8 x;
    111                if (!SYSTEM_RUN && x > 2)
   \   0000E3 C6 ....      LD        A, L:SYSTEM_RUN
   \   0000E6 4D           TNZ       A
   \   0000E7 27 03        JREQ      ??lb_1
   \   0000E9 CC ....      JP        L:??main_8
   \                     ??lb_1:
   \   0000EC B6 ..        LD        A, S:?b10
   \   0000EE A1 03        CP        A, #0x3
   \   0000F0 24 03        JRNC      ??lb_2
   \   0000F2 CC ....      JP        L:??main_8
    112                {
    113                  // ÊòæÁ§∫Ê∏©Â∫¶
    114                  SUM = (SUM < -99) ? -99 : SUM;
   \                     ??lb_2:
   \   0000F5 BE ..        LDW       X, S:?w4
   \   0000F7 A3 FF9D      CPW       X, #0xffffffffffffff9d
   \   0000FA 2E 07        JRSGE     L:??main_9
   \   0000FC AE FF9D      LDW       X, #0xff9d
   \   0000FF BF ..        LDW       S:?w4, X
   \   000101 20 00        JRA       L:??main_10
    115                  if (SUM < 0)
   \                     ??main_9:
   \                     ??main_10:
   \   000103 BE ..        LDW       X, S:?w4
   \   000105 A3 0000      CPW       X, #0x0
   \   000108 2E 4C        JRSGE     L:??main_11
    116                  {
    117                    tm1650_displayW(0, 0x40);
   \   00010A 35 40 ....   MOV       S:?b0, #0x40
   \   00010E 4F           CLR       A
   \   00010F 8D ......    CALLF     tm1650_displayW
    118                    SUM = ~SUM + 1;
   \   000113 BE ..        LDW       X, S:?w4
   \   000115 53           CPLW      X
   \   000116 BF ..        LDW       S:?w4, X
   \   000118 BE ..        LDW       X, S:?w4
   \   00011A 5C           INCW      X
   \   00011B BF ..        LDW       S:?w4, X
    119                    tm1650_displayW(1, (LED7CodeL[SUM / 10 % 10]) | 0x80);
   \   00011D 90AE 000A    LDW       Y, #0xa
   \   000121 BE ..        LDW       X, S:?w4
   \   000123 8D ......    CALLF     L:?sdiv16_x_x_y
   \   000127 90AE 000A    LDW       Y, #0xa
   \   00012B 8D ......    CALLF     L:?smod16_y_x_y
   \   00012F 93           LDW       X, Y
   \   000130 D6 ....      LD        A, (L:LED7CodeL,X)
   \   000133 AA 80        OR        A, #0x80
   \   000135 B7 ..        LD        S:?b0, A
   \   000137 A6 01        LD        A, #0x1
   \   000139 8D ......    CALLF     tm1650_displayW
    120                    tm1650_displayW(2, LED7CodeL[SUM % 10]);
   \   00013D 90AE 000A    LDW       Y, #0xa
   \   000141 BE ..        LDW       X, S:?w4
   \   000143 8D ......    CALLF     L:?smod16_y_x_y
   \   000147 93           LDW       X, Y
   \   000148 D6 ....      LD        A, (L:LED7CodeL,X)
   \   00014B B7 ..        LD        S:?b0, A
   \   00014D A6 02        LD        A, #0x2
   \   00014F 8D ......    CALLF     tm1650_displayW
   \   000153 CC ....      JP        L:??main_8
    121                  }
    122                  else
    123                  {
    124                    SUM = (SUM > 999) ? 999 : SUM;
   \                     ??main_11:
   \   000156 BE ..        LDW       X, S:?w4
   \   000158 A3 03E8      CPW       X, #0x3e8
   \   00015B 2F 07        JRSLT     L:??main_12
   \   00015D AE 03E7      LDW       X, #0x3e7
   \   000160 BF ..        LDW       S:?w4, X
   \   000162 20 00        JRA       L:??main_13
    125                    if ((SUM / 100 % 100) == 0)
   \                     ??main_12:
   \                     ??main_13:
   \   000164 90AE 0064    LDW       Y, #0x64
   \   000168 BE ..        LDW       X, S:?w4
   \   00016A 8D ......    CALLF     L:?sdiv16_x_x_y
   \   00016E 90AE 0064    LDW       Y, #0x64
   \   000172 8D ......    CALLF     L:?smod16_y_x_y
   \   000176 905D         TNZW      Y
   \   000178 26 09        JRNE      L:??main_14
    126                    {
    127                      tm1650_displayW(0, 0x00);
   \   00017A 3F ..        CLR       S:?b0
   \   00017C 4F           CLR       A
   \   00017D 8D ......    CALLF     tm1650_displayW
   \   000181 20 1D        JRA       L:??main_15
    128                    }
    129                    else
    130                    {
    131                      tm1650_displayW(0, LED7CodeL[SUM / 100 % 100]);
   \                     ??main_14:
   \   000183 90AE 0064    LDW       Y, #0x64
   \   000187 BE ..        LDW       X, S:?w4
   \   000189 8D ......    CALLF     L:?sdiv16_x_x_y
   \   00018D 90AE 0064    LDW       Y, #0x64
   \   000191 8D ......    CALLF     L:?smod16_y_x_y
   \   000195 93           LDW       X, Y
   \   000196 D6 ....      LD        A, (L:LED7CodeL,X)
   \   000199 B7 ..        LD        S:?b0, A
   \   00019B 4F           CLR       A
   \   00019C 8D ......    CALLF     tm1650_displayW
    132                    }
    133                    tm1650_displayW(1, (LED7CodeL[SUM / 10 % 10]) | 0x80);
   \                     ??main_15:
   \   0001A0 90AE 000A    LDW       Y, #0xa
   \   0001A4 BE ..        LDW       X, S:?w4
   \   0001A6 8D ......    CALLF     L:?sdiv16_x_x_y
   \   0001AA 90AE 000A    LDW       Y, #0xa
   \   0001AE 8D ......    CALLF     L:?smod16_y_x_y
   \   0001B2 93           LDW       X, Y
   \   0001B3 D6 ....      LD        A, (L:LED7CodeL,X)
   \   0001B6 AA 80        OR        A, #0x80
   \   0001B8 B7 ..        LD        S:?b0, A
   \   0001BA A6 01        LD        A, #0x1
   \   0001BC 8D ......    CALLF     tm1650_displayW
    134                    tm1650_displayW(2, LED7CodeL[SUM % 10]);
   \   0001C0 90AE 000A    LDW       Y, #0xa
   \   0001C4 BE ..        LDW       X, S:?w4
   \   0001C6 8D ......    CALLF     L:?smod16_y_x_y
   \   0001CA 93           LDW       X, Y
   \   0001CB D6 ....      LD        A, (L:LED7CodeL,X)
   \   0001CE B7 ..        LD        S:?b0, A
   \   0001D0 A6 02        LD        A, #0x2
   \   0001D2 8D ......    CALLF     tm1650_displayW
    135                  }
    136                }
    137                x++;
   \                     ??main_8:
   \   0001D6 3C ..        INC       S:?b10
    138                x = (x > 10) ? 0 : x;
   \   0001D8 B6 ..        LD        A, S:?b10
   \   0001DA A1 0B        CP        A, #0xb
   \   0001DC 25 04        JRC       L:??main_16
   \   0001DE 3F ..        CLR       S:?b10
   \   0001E0 20 00        JRA       L:??main_3
    139              }
    140          
    141              // LED ÂºÄÂêØÁä∂ÊÄÅ
    142              if (LED_STATUS)
   \                     ??main_16:
   \                     ??main_3:
   \   0001E2 C6 ....      LD        A, L:LED_STATUS
   \   0001E5 4D           TNZ       A
   \   0001E6 27 06        JREQ      L:??main_17
    143              {
    144                LED_LED_EN;
   \   0001E8 7213 5000    BRES      L:0x5000, #0x1
   \   0001EC 20 04        JRA       L:??main_18
    145              }
    146              else
    147              {
    148                LED_LED_CL;
   \                     ??main_17:
   \   0001EE 7212 5000    BSET      L:0x5000, #0x1
    149              }
    150          
    151              // ÂºÄÂêØÂä†Ê∏©
    152              if (TEM_STATUS)
   \                     ??main_18:
   \   0001F2 C6 ....      LD        A, L:TEM_STATUS
   \   0001F5 4D           TNZ       A
   \   0001F6 27 3F        JREQ      L:??main_19
    153              {
    154                if (SYSTEM_RUN)
   \   0001F8 C6 ....      LD        A, L:SYSTEM_RUN
   \   0001FB 4D           TNZ       A
   \   0001FC 27 09        JREQ      L:??main_20
    155                {
    156                  delay_ms(500);
   \   0001FE AE 01F4      LDW       X, #0x1f4
   \   000201 8D ......    CALLF     delay_ms
   \   000205 20 21        JRA       L:??main_21
    157                }
    158                else
    159                {
    160                  if (SUM < TEM_SUM)
   \                     ??main_20:
   \   000207 BE ..        LDW       X, S:?w4
   \   000209 C3 ....      CPW       X, L:TEM_SUM
   \   00020C 2E 0E        JRSGE     L:??main_22
    161                  {
    162                    SW_EN;
   \   00020E 7216 500A    BSET      L:0x500a, #0x3
    163                    TEM_LED_EN;
   \   000212 721B 500A    BRES      L:0x500a, #0x5
   \   000216 721C 500A    BSET      L:0x500a, #0x6
   \   00021A 20 0C        JRA       L:??main_21
    164                  }
    165                  else
    166                  {
    167                    SW_CL;
   \                     ??main_22:
   \   00021C 7217 500A    BRES      L:0x500a, #0x3
    168                    TEM_LED_CL;
   \   000220 721A 500A    BSET      L:0x500a, #0x5
   \   000224 721D 500A    BRES      L:0x500a, #0x6
    169                  }
    170                }
    171                FAN_LED_EN;
   \                     ??main_21:
   \   000228 721D 500F    BRES      L:0x500f, #0x6
    172                TIM2_SetCompare3(FAN_PWM_NUM);
   \   00022C C6 ....      LD        A, L:FAN_PWM_NUM
   \   00022F 5F           CLRW      X
   \   000230 97           LD        XL, A
   \   000231 8D ......    CALLF     TIM2_SetCompare3
   \   000235 20 15        JRA       L:??main_23
    173              }
    174              else
    175              {
    176                SW_CL;
   \                     ??main_19:
   \   000237 7217 500A    BRES      L:0x500a, #0x3
    177                TEM_LED_CL;
   \   00023B 721A 500A    BSET      L:0x500a, #0x5
   \   00023F 721D 500A    BRES      L:0x500a, #0x6
    178                FAN_LED_CL;
   \   000243 721C 500F    BSET      L:0x500f, #0x6
    179                TIM2_SetCompare3(0);
   \   000247 5F           CLRW      X
   \   000248 8D ......    CALLF     TIM2_SetCompare3
    180              }
    181          
    182              SYSTEM_RUN = FALSE;
   \                     ??main_23:
   \   00024C 725F ....    CLR       L:SYSTEM_RUN
    183          
    184              // Êç¢È£é
    185              if (HF_STATUS)
   \   000250 C6 ....      LD        A, L:HF_STATUS
   \   000253 4D           TNZ       A
   \   000254 27 25        JREQ      L:??main_24
    186              {
    187                if ((SUM - TEM_SUM) > 10 && !IT_HF_STATUS)
   \   000256 BE ..        LDW       X, S:?w4
   \   000258 72B0 ....    SUBW      X, L:TEM_SUM
   \   00025C A3 000B      CPW       X, #0xb
   \   00025F 2F 0A        JRSLT     L:??main_25
   \   000261 C6 ....      LD        A, L:IT_HF_STATUS
   \   000264 4D           TNZ       A
   \   000265 26 04        JRNE      L:??main_25
    188                {
    189                  IT_HF_STATUS = TRUE;
   \   000267 35 01 ....   MOV       L:IT_HF_STATUS, #0x1
    190                }
    191                if (IT_HF_STATUS)
   \                     ??main_25:
   \   00026B C6 ....      LD        A, L:IT_HF_STATUS
   \   00026E 4D           TNZ       A
   \   00026F 27 06        JREQ      L:??main_26
    192                {
    193                  HF_EN;
   \   000271 7214 5000    BSET      L:0x5000, #0x2
   \   000275 20 04        JRA       L:??main_24
    194                }
    195                else
    196                {
    197                  HF_CL;
   \                     ??main_26:
   \   000277 7215 5000    BRES      L:0x5000, #0x2
    198                }
    199              }
    200          
    201              // ÂåπÈÖçÊåâÈîÆ
    202              u8 KEY = tm1650_displaykeyR();
   \                     ??main_24:
   \   00027B 8D ......    CALLF     tm1650_displaykeyR
   \   00027F B7 ..        LD        S:?b10, A
    203              btn_down(KEY);
   \   000281 B6 ..        LD        A, S:?b10
   \   000283 8D ......    CALLF     btn_down
   \   000287 CC ....      JP        L:??main_0
   \   00028A              REQUIRE _A_PC_ODR
   \   00028A              REQUIRE _A_PA_ODR
   \   00028A              REQUIRE _A_PD_ODR
    204            }
    205          }
    206          

   \                                 In section .far_func.text, align 1
    207          void assert_failed(u8 *file, u32 line)
    208          {
    209            /* User can add his own implementation to report the file name and line number,
    210               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    211          
    212            /* Infinite loop */
    213            // while (1)
    214            // {
    215            // }
    216          }
   \                     assert_failed:
   \   000000 87           RETF
    217          
    218          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  CONFIG_STATUS
       1  DS18B20_CONVERT_STATUS
       1  FAN_PWM_NUM
       1  HF_STATUS
       1  IT_HF_STATUS
      18  LED7CodeH
      18  LED7CodeL
       1  LED_STATUS
       1  MSD_STATUS
       1  MSD_TIME_STATUS
       1  SYSTEM_RUN
       1  TEM_STATUS
       2  TEM_SUM
       1  _A_PA_ODR
       1  _A_PC_ODR
       1  _A_PD_ODR
       1  assert_failed
       5  btn
     650  main

 
 651 bytes in section .far_func.text
  12 bytes in section .near.bss
  41 bytes in section .near.data
   3 bytes in section .near.noinit   (abs)
 
 651 bytes of CODE memory
  53 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: 281
