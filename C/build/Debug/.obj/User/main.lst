###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 24/Jan/2024  16:39:13
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\User\main.c
#    Command line =  
#        -f "e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S803-EE22-
#        KF7620-∑÷ÃÂ\C\build\Debug\.obj\User\main.args.txt" (--silent -lCN
#        .\build\Debug\.obj\User\main.lst -I "d:/Program Files (x86)/IAR
#        Systems/STM8/stm8/lib" -I Lib/H -I Lib/C -I User -D STM8S003
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\.obj\User\main.o .\User\main.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\.obj\User\main.lst
#    Object file  =  .\build\Debug\.obj\User\main.o
#
###############################################################################

e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S803-EE22- KF7620-∑÷ÃÂ\C\User\main.c
      1          /**
      2           ******************************************************************************
      3           * @file    Project/main.c
      4           * @author  MCD Application Team
      5           * @version V2.3.0
      6           * @date    16-June-2017
      7           * @brief   Main program body
      8           ******************************************************************************
      9           * @attention
     10           *
     11           * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12           *
     13           * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14           * You may not use this file except in compliance with the License.
     15           * You may obtain a copy of the License at:
     16           *
     17           *        http://www.st.com/software_license_agreement_liberty_v2
     18           *
     19           * Unless required by applicable law or agreed to in writing, software
     20           * distributed under the License is distributed on an "AS IS" BASIS,
     21           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22           * See the License for the specific language governing permissions and
     23           * limitations under the License.
     24           *
     25           ******************************************************************************
     26           */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "init.h"

   \                                 In section .near.noinit, at 0x5000
   \   union <unnamed> volatile _A_PA_ODR
   \                     _A_PA_ODR:
   \   000000              DS8 1

   \                                 In section .near.noinit, at 0x500a
   \   union <unnamed> volatile _A_PC_ODR
   \                     _A_PC_ODR:
   \   000000              DS8 1

   \                                 In section .near.noinit, at 0x500f
   \   union <unnamed> volatile _A_PD_ODR
   \                     _A_PD_ODR:
   \   000000              DS8 1
     30          
     31          /* Private defines -----------------------------------------------------------*/
     32          
     33          // TODO:TM1650-LEDÁ†Å	   0	 1		2     3     4     5    6     7     8     9     A     B     C     D     E     F	  P 	-
     34          // LED7codeH ÂÖ±Èò≥ , LED7codeL ÂÖ±Èò¥

   \                                 In section .near.data, align 1
     35          uint8_t LED7CodeH[] = {~0x3f, ~0x06, ~0x5b, ~0x4f, ~0x66, ~0x6d, ~0x7d, ~0x07, ~0x7f, ~0x6f, ~0x77, ~0x7c, ~0x39, ~0x5e, ~0x79, ~0x71, ~0x73, ~0x40};
   \                     LED7CodeH:
   \   000000 C0 F9 A4 B0  DC8 192, 249, 164, 176, 153, 146, 130, 248, 128, 144, 136, 131, 198
   \          99 92 82 F8 
   \   00000D A1 86 8E 8C  DC8 161, 134, 142, 140, 191
   \          BF          

   \                                 In section .near.data, align 1
     36          uint8_t LED7CodeL[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, 0x73, 0x40};
   \                     LED7CodeL:
   \   000000 3F 06 5B 4F  DC8 63, 6, 91, 79, 102, 109, 125, 7, 127, 111, 119, 124, 57, 94, 121
   \          66 6D 7D 07 
   \   00000F 71 73 40     DC8 113, 115, 64
     37          
     38          /* Private function prototypes -----------------------------------------------*/

   \                                 In section .near.bss, align 1
     39          int TEM_SUM;
   \                     TEM_SUM:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     40          u8 FAN_PWM_NUM;
   \                     FAN_PWM_NUM:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     41          bool LED_STATUS, TEM_STATUS, CONFIG_STATUS;
   \                     LED_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     TEM_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     CONFIG_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     42          bool SYSTEM_RUN, DS18B20_CONVERT_STATUS, HF_STATUS, MSD_STATUS, MSD_TIME_STATUS;
   \                     SYSTEM_RUN:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     DS18B20_CONVERT_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     HF_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     MSD_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     MSD_TIME_STATUS:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     43          bool IT_HF_STATUS;
   \                     IT_HF_STATUS:
   \   000000              DS8 1
     44          // btn[0] ‰∏∫ÂêØÂä®/ÂÅúÊ≠¢ÊåâÈíÆ, btn[1] ËÆæÁΩÆÊåâÈíÆ, btn[2] +ÊåâÈíÆÔºå btn[3] -ÊåâÈíÆ, btn[4] Á°ÆÂÆö/ÁÅØÂÖâÊåâÈíÆ.

   \                                 In section .near.data, align 1
     45          u8 btn[] = {0x44, 0x4c, 0x54, 0x5c, 0x64};
   \                     btn:
   \   000000 44 4C 54 5C  DC8 68, 76, 84, 92, 100
   \          64          
     46          

   \                                 In section .far_func.text, align 1
     47          void main(void)
     48          {
   \                     main:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
     49            /* Infinite loop */
     50            init();
   \   000007 8D ......    CALLF     init
     51            TIM2_Cmd(ENABLE);
   \   00000B A6 01        LD        A, #0x1
   \   00000D 8D ......    CALLF     TIM2_Cmd
     52            TIM1_Cmd(ENABLE);
   \   000011 A6 01        LD        A, #0x1
   \   000013 8D ......    CALLF     TIM1_Cmd
     53            tm1650_displayInit();
   \   000017 8D ......    CALLF     tm1650_displayInit
     54            delay_ms(100);
   \   00001B AE 0064      LDW       X, #0x64
   \   00001E 8D ......    CALLF     delay_ms
     55            MSD_STATUS = FALSE;
   \   000022 725F ....    CLR       L:MSD_STATUS
     56            MSD_TIME_STATUS = FALSE;
   \   000026 725F ....    CLR       L:MSD_TIME_STATUS
     57          
     58            // ËØªÂèñÊï∞ÊçÆ
     59            TEM_SUM = FLASH_DATA_TEM_SUM_READ();
   \   00002A 8D ......    CALLF     FLASH_DATA_TEM_SUM_READ
   \   00002E CF ....      LDW       L:TEM_SUM, X
     60            FAN_PWM_NUM = FLASH_DATA_FAN_PWM_READ();
   \   000031 8D ......    CALLF     FLASH_DATA_FAN_PWM_READ
   \   000035 C7 ....      LD        L:FAN_PWM_NUM, A
     61            TEM_STATUS = FLASH_DATA_TEM_STATUS_READ();
   \   000038 8D ......    CALLF     FLASH_DATA_TEM_STATUS_READ
   \   00003C C7 ....      LD        L:TEM_STATUS, A
     62            LED_STATUS = FLASH_DATA_LED_STATUS_READ();
   \   00003F 8D ......    CALLF     FLASH_DATA_LED_STATUS_READ
   \   000043 C7 ....      LD        L:LED_STATUS, A
     63            HF_STATUS = FLASH_DATA_HF_STATUS_READ();
   \   000046 8D ......    CALLF     FLASH_DATA_HF_STATUS_READ
   \   00004A C7 ....      LD        L:HF_STATUS, A
     64          
     65            SYSTEM_RUN = TRUE;
   \   00004D 35 01 ....   MOV       L:SYSTEM_RUN, #0x1
     66            DS18B20_CONVERT_STATUS = FALSE;
   \   000051 725F ....    CLR       L:DS18B20_CONVERT_STATUS
     67          
     68            TEM_LED_CL;
   \   000055 721A 500A    BSET      L:0x500a, #0x5
   \   000059 721D 500A    BRES      L:0x500a, #0x6
     69          
     70            while (1)
     71            {
     72              // ËøáÊ∏©Ê£ÄÊµãÔºåÂ¶ÇÊûúÊ∏©Â∫¶È´ò‰∫éËÆæÂÆöÁöÑ5Â∫¶ÔºåÂπ∂‰∏îÊåÅÁª≠30ÁßíÔºåÂ∞±ÂÖ≥Èó≠Âä†Ê∏©ÁªßÁîµÂô®
     73              // if(MSD_TIME_STATUS)
     74              // {
     75              //   MSD_CL;
     76              //   SW_CL;
     77              //   LED_STATUS = TRUE;
     78              //   FAN_CL;
     79              //   TEM_LED_CL;
     80          
     81              //   while(1);
     82              // }
     83              // ÂêØÂä® DS18B20 ËøõË°åÊ∏©Â∫¶ËΩ¨Êç¢
     84              int SUM;
     85              if (!DS18B20_CONVERT_STATUS)
   \                     ??main_0:
   \   00005D C6 ....      LD        A, L:DS18B20_CONVERT_STATUS
   \   000060 4D           TNZ       A
   \   000061 27 03        JREQ      ??lb_0
   \   000063 CC ....      JP        L:??main_1
     86              {
     87                disableInterrupts();
   \                     ??lb_0:
   \   000066 9B           SIM
     88          
     89                // ËΩ¨Êç¢Ê∏©Â∫¶
     90                while (!DS18B20_Init())
   \                     ??main_2:
   \   000067 8D ......    CALLF     DS18B20_Init
   \   00006B A1 00        CP        A, #0x0
   \   00006D 26 09        JRNE      L:??main_3
     91                {
     92                  delay_ms(10);
   \   00006F AE 000A      LDW       X, #0xa
   \   000072 8D ......    CALLF     delay_ms
   \   000076 20 EF        JRA       L:??main_2
     93                }
     94                ds18b20_Conver();
   \                     ??main_3:
   \   000078 8D ......    CALLF     ds18b20_Conver
     95                DS18B20_CONVERT_STATUS = TRUE;
   \   00007C 35 01 ....   MOV       L:DS18B20_CONVERT_STATUS, #0x1
     96          
     97                // ËØªÂèñÊ∏©Â∫¶
     98                while (!DS18B20_Init())
   \                     ??main_4:
   \   000080 8D ......    CALLF     DS18B20_Init
   \   000084 A1 00        CP        A, #0x0
   \   000086 26 09        JRNE      L:??main_5
     99                {
    100                  delay_ms(10);
   \   000088 AE 000A      LDW       X, #0xa
   \   00008B 8D ......    CALLF     delay_ms
   \   00008F 20 EF        JRA       L:??main_4
    101                };
    102                SUM = DS18B20_Convert_Get_Tem(DS18B20_Read());
   \                     ??main_5:
   \   000091 8D ......    CALLF     DS18B20_Read
   \   000095 8D ......    CALLF     DS18B20_Convert_Get_Tem
   \   000099 BF ..        LDW       S:?w4, X
    103                delay_ms(5);
   \   00009B AE 0005      LDW       X, #0x5
   \   00009E 8D ......    CALLF     delay_ms
    104          
    105                enableInterrupts();
   \   0000A2 9A           RIM
    106          
    107                u8 x;
    108                if (!SYSTEM_RUN && x > 2)
   \   0000A3 C6 ....      LD        A, L:SYSTEM_RUN
   \   0000A6 4D           TNZ       A
   \   0000A7 27 03        JREQ      ??lb_1
   \   0000A9 CC ....      JP        L:??main_6
   \                     ??lb_1:
   \   0000AC B6 ..        LD        A, S:?b10
   \   0000AE A1 03        CP        A, #0x3
   \   0000B0 24 03        JRNC      ??lb_2
   \   0000B2 CC ....      JP        L:??main_6
    109                {
    110                  // ÊòæÁ§∫Ê∏©Â∫¶
    111                  SUM = (SUM < -99) ? -99 : SUM;
   \                     ??lb_2:
   \   0000B5 BE ..        LDW       X, S:?w4
   \   0000B7 A3 FF9D      CPW       X, #0xffffffffffffff9d
   \   0000BA 2E 07        JRSGE     L:??main_7
   \   0000BC AE FF9D      LDW       X, #0xff9d
   \   0000BF BF ..        LDW       S:?w4, X
   \   0000C1 20 00        JRA       L:??main_8
    112                  if (SUM < 0)
   \                     ??main_7:
   \                     ??main_8:
   \   0000C3 BE ..        LDW       X, S:?w4
   \   0000C5 A3 0000      CPW       X, #0x0
   \   0000C8 2E 4C        JRSGE     L:??main_9
    113                  {
    114                    tm1650_displayW(0, 0x40);
   \   0000CA 35 40 ....   MOV       S:?b0, #0x40
   \   0000CE 4F           CLR       A
   \   0000CF 8D ......    CALLF     tm1650_displayW
    115                    SUM = ~SUM + 1;
   \   0000D3 BE ..        LDW       X, S:?w4
   \   0000D5 53           CPLW      X
   \   0000D6 BF ..        LDW       S:?w4, X
   \   0000D8 BE ..        LDW       X, S:?w4
   \   0000DA 5C           INCW      X
   \   0000DB BF ..        LDW       S:?w4, X
    116                    tm1650_displayW(1, (LED7CodeL[SUM / 10 % 10]) | 0x80);
   \   0000DD 90AE 000A    LDW       Y, #0xa
   \   0000E1 BE ..        LDW       X, S:?w4
   \   0000E3 8D ......    CALLF     L:?sdiv16_x_x_y
   \   0000E7 90AE 000A    LDW       Y, #0xa
   \   0000EB 8D ......    CALLF     L:?smod16_y_x_y
   \   0000EF 93           LDW       X, Y
   \   0000F0 D6 ....      LD        A, (L:LED7CodeL,X)
   \   0000F3 AA 80        OR        A, #0x80
   \   0000F5 B7 ..        LD        S:?b0, A
   \   0000F7 A6 01        LD        A, #0x1
   \   0000F9 8D ......    CALLF     tm1650_displayW
    117                    tm1650_displayW(2, LED7CodeL[SUM % 10]);
   \   0000FD 90AE 000A    LDW       Y, #0xa
   \   000101 BE ..        LDW       X, S:?w4
   \   000103 8D ......    CALLF     L:?smod16_y_x_y
   \   000107 93           LDW       X, Y
   \   000108 D6 ....      LD        A, (L:LED7CodeL,X)
   \   00010B B7 ..        LD        S:?b0, A
   \   00010D A6 02        LD        A, #0x2
   \   00010F 8D ......    CALLF     tm1650_displayW
   \   000113 CC ....      JP        L:??main_6
    118                  }
    119                  else
    120                  {
    121                    SUM = (SUM > 999) ? 999 : SUM;
   \                     ??main_9:
   \   000116 BE ..        LDW       X, S:?w4
   \   000118 A3 03E8      CPW       X, #0x3e8
   \   00011B 2F 07        JRSLT     L:??main_10
   \   00011D AE 03E7      LDW       X, #0x3e7
   \   000120 BF ..        LDW       S:?w4, X
   \   000122 20 00        JRA       L:??main_11
    122                    if ((SUM / 100 % 100) == 0)
   \                     ??main_10:
   \                     ??main_11:
   \   000124 90AE 0064    LDW       Y, #0x64
   \   000128 BE ..        LDW       X, S:?w4
   \   00012A 8D ......    CALLF     L:?sdiv16_x_x_y
   \   00012E 90AE 0064    LDW       Y, #0x64
   \   000132 8D ......    CALLF     L:?smod16_y_x_y
   \   000136 905D         TNZW      Y
   \   000138 26 09        JRNE      L:??main_12
    123                    {
    124                      tm1650_displayW(0, 0x00);
   \   00013A 3F ..        CLR       S:?b0
   \   00013C 4F           CLR       A
   \   00013D 8D ......    CALLF     tm1650_displayW
   \   000141 20 1D        JRA       L:??main_13
    125                    }
    126                    else
    127                    {
    128                      tm1650_displayW(0, LED7CodeL[SUM / 100 % 100]);
   \                     ??main_12:
   \   000143 90AE 0064    LDW       Y, #0x64
   \   000147 BE ..        LDW       X, S:?w4
   \   000149 8D ......    CALLF     L:?sdiv16_x_x_y
   \   00014D 90AE 0064    LDW       Y, #0x64
   \   000151 8D ......    CALLF     L:?smod16_y_x_y
   \   000155 93           LDW       X, Y
   \   000156 D6 ....      LD        A, (L:LED7CodeL,X)
   \   000159 B7 ..        LD        S:?b0, A
   \   00015B 4F           CLR       A
   \   00015C 8D ......    CALLF     tm1650_displayW
    129                    }
    130                    tm1650_displayW(1, (LED7CodeL[SUM / 10 % 10]) | 0x80);
   \                     ??main_13:
   \   000160 90AE 000A    LDW       Y, #0xa
   \   000164 BE ..        LDW       X, S:?w4
   \   000166 8D ......    CALLF     L:?sdiv16_x_x_y
   \   00016A 90AE 000A    LDW       Y, #0xa
   \   00016E 8D ......    CALLF     L:?smod16_y_x_y
   \   000172 93           LDW       X, Y
   \   000173 D6 ....      LD        A, (L:LED7CodeL,X)
   \   000176 AA 80        OR        A, #0x80
   \   000178 B7 ..        LD        S:?b0, A
   \   00017A A6 01        LD        A, #0x1
   \   00017C 8D ......    CALLF     tm1650_displayW
    131                    tm1650_displayW(2, LED7CodeL[SUM % 10]);
   \   000180 90AE 000A    LDW       Y, #0xa
   \   000184 BE ..        LDW       X, S:?w4
   \   000186 8D ......    CALLF     L:?smod16_y_x_y
   \   00018A 93           LDW       X, Y
   \   00018B D6 ....      LD        A, (L:LED7CodeL,X)
   \   00018E B7 ..        LD        S:?b0, A
   \   000190 A6 02        LD        A, #0x2
   \   000192 8D ......    CALLF     tm1650_displayW
    132                  }
    133                }
    134                x++;
   \                     ??main_6:
   \   000196 3C ..        INC       S:?b10
    135                x = (x > 10) ? 0 : x;
   \   000198 B6 ..        LD        A, S:?b10
   \   00019A A1 0B        CP        A, #0xb
   \   00019C 25 04        JRC       L:??main_14
   \   00019E 3F ..        CLR       S:?b10
   \   0001A0 20 00        JRA       L:??main_1
    136              }
    137          
    138              // LED ÂºÄÂêØÁä∂ÊÄÅ
    139              if (LED_STATUS)
   \                     ??main_14:
   \                     ??main_1:
   \   0001A2 C6 ....      LD        A, L:LED_STATUS
   \   0001A5 4D           TNZ       A
   \   0001A6 27 06        JREQ      L:??main_15
    140              {
    141                LED_LED_EN;
   \   0001A8 7213 5000    BRES      L:0x5000, #0x1
   \   0001AC 20 04        JRA       L:??main_16
    142              }
    143              else
    144              {
    145                LED_LED_CL;
   \                     ??main_15:
   \   0001AE 7212 5000    BSET      L:0x5000, #0x1
    146              }
    147          
    148              // ÂºÄÂêØÂä†Ê∏©
    149              if (TEM_STATUS)
   \                     ??main_16:
   \   0001B2 C6 ....      LD        A, L:TEM_STATUS
   \   0001B5 4D           TNZ       A
   \   0001B6 27 3F        JREQ      L:??main_17
    150              {
    151                if (SYSTEM_RUN)
   \   0001B8 C6 ....      LD        A, L:SYSTEM_RUN
   \   0001BB 4D           TNZ       A
   \   0001BC 27 09        JREQ      L:??main_18
    152                {
    153                  delay_ms(500);
   \   0001BE AE 01F4      LDW       X, #0x1f4
   \   0001C1 8D ......    CALLF     delay_ms
   \   0001C5 20 21        JRA       L:??main_19
    154                }
    155                else
    156                {
    157                  if (SUM < TEM_SUM)
   \                     ??main_18:
   \   0001C7 BE ..        LDW       X, S:?w4
   \   0001C9 C3 ....      CPW       X, L:TEM_SUM
   \   0001CC 2E 0E        JRSGE     L:??main_20
    158                  {
    159                    SW_EN;
   \   0001CE 7216 500A    BSET      L:0x500a, #0x3
    160                    TEM_LED_EN;
   \   0001D2 721B 500A    BRES      L:0x500a, #0x5
   \   0001D6 721C 500A    BSET      L:0x500a, #0x6
   \   0001DA 20 0C        JRA       L:??main_19
    161                  }
    162                  else
    163                  {
    164                    SW_CL;
   \                     ??main_20:
   \   0001DC 7217 500A    BRES      L:0x500a, #0x3
    165                    TEM_LED_CL;
   \   0001E0 721A 500A    BSET      L:0x500a, #0x5
   \   0001E4 721D 500A    BRES      L:0x500a, #0x6
    166                  }
    167                }
    168                FAN_LED_EN;
   \                     ??main_19:
   \   0001E8 721D 500F    BRES      L:0x500f, #0x6
    169                TIM2_SetCompare3(FAN_PWM_NUM);
   \   0001EC C6 ....      LD        A, L:FAN_PWM_NUM
   \   0001EF 5F           CLRW      X
   \   0001F0 97           LD        XL, A
   \   0001F1 8D ......    CALLF     TIM2_SetCompare3
   \   0001F5 20 15        JRA       L:??main_21
    170              }
    171              else
    172              {
    173                SW_CL;
   \                     ??main_17:
   \   0001F7 7217 500A    BRES      L:0x500a, #0x3
    174                TEM_LED_CL;
   \   0001FB 721A 500A    BSET      L:0x500a, #0x5
   \   0001FF 721D 500A    BRES      L:0x500a, #0x6
    175                FAN_LED_CL;
   \   000203 721C 500F    BSET      L:0x500f, #0x6
    176                TIM2_SetCompare3(0);
   \   000207 5F           CLRW      X
   \   000208 8D ......    CALLF     TIM2_SetCompare3
    177              }
    178          
    179              SYSTEM_RUN = FALSE;
   \                     ??main_21:
   \   00020C 725F ....    CLR       L:SYSTEM_RUN
    180          
    181              // Êç¢È£é
    182              if (HF_STATUS)
   \   000210 C6 ....      LD        A, L:HF_STATUS
   \   000213 4D           TNZ       A
   \   000214 27 25        JREQ      L:??main_22
    183              {
    184                if ((SUM - TEM_SUM) > 10 && !IT_HF_STATUS)
   \   000216 BE ..        LDW       X, S:?w4
   \   000218 72B0 ....    SUBW      X, L:TEM_SUM
   \   00021C A3 000B      CPW       X, #0xb
   \   00021F 2F 0A        JRSLT     L:??main_23
   \   000221 C6 ....      LD        A, L:IT_HF_STATUS
   \   000224 4D           TNZ       A
   \   000225 26 04        JRNE      L:??main_23
    185                {
    186                  IT_HF_STATUS = TRUE;
   \   000227 35 01 ....   MOV       L:IT_HF_STATUS, #0x1
    187                }
    188                if (IT_HF_STATUS)
   \                     ??main_23:
   \   00022B C6 ....      LD        A, L:IT_HF_STATUS
   \   00022E 4D           TNZ       A
   \   00022F 27 06        JREQ      L:??main_24
    189                {
    190                  HF_EN;
   \   000231 7214 5000    BSET      L:0x5000, #0x2
   \   000235 20 04        JRA       L:??main_22
    191                }
    192                else
    193                {
    194                  HF_CL;
   \                     ??main_24:
   \   000237 7215 5000    BRES      L:0x5000, #0x2
    195                }
    196              }
    197          
    198              // ÂåπÈÖçÊåâÈîÆ
    199              u8 KEY = tm1650_displaykeyR();
   \                     ??main_22:
   \   00023B 8D ......    CALLF     tm1650_displaykeyR
   \   00023F B7 ..        LD        S:?b10, A
    200              btn_down(KEY);
   \   000241 B6 ..        LD        A, S:?b10
   \   000243 8D ......    CALLF     btn_down
   \   000247 CC ....      JP        L:??main_0
   \   00024A              REQUIRE _A_PC_ODR
   \   00024A              REQUIRE _A_PA_ODR
   \   00024A              REQUIRE _A_PD_ODR
    201            }
    202          }
    203          

   \                                 In section .far_func.text, align 1
    204          void assert_failed(u8 *file, u32 line)
    205          {
    206            /* User can add his own implementation to report the file name and line number,
    207               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    208          
    209            /* Infinite loop */
    210            // while (1)
    211            // {
    212            // }
    213          }
   \                     assert_failed:
   \   000000 87           RETF
    214          
    215          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  CONFIG_STATUS
       1  DS18B20_CONVERT_STATUS
       1  FAN_PWM_NUM
       1  HF_STATUS
       1  IT_HF_STATUS
      18  LED7CodeH
      18  LED7CodeL
       1  LED_STATUS
       1  MSD_STATUS
       1  MSD_TIME_STATUS
       1  SYSTEM_RUN
       1  TEM_STATUS
       2  TEM_SUM
       1  _A_PA_ODR
       1  _A_PC_ODR
       1  _A_PD_ODR
       1  assert_failed
       5  btn
     586  main

 
 587 bytes in section .far_func.text
  12 bytes in section .near.bss
  41 bytes in section .near.data
   3 bytes in section .near.noinit   (abs)
 
 587 bytes of CODE memory
  53 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: 259
