###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 09/Jan/2024  17:40:25
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\User\stm8s_it.c
#    Command line =  
#        -f
#        "e:\Nas\电路\保温箱\YZW-S8-EE22(Rev1.0)\C\build\Debug\User\stm8s_it.args.txt"
#        (--silent -lCN .\build\Debug\User\stm8s_it.lst -I d:/IAR/STM8 -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S003
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\User\stm8s_it.o .\User\stm8s_it.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\User\stm8s_it.lst
#    Object file  =  .\build\Debug\User\stm8s_it.o
#
###############################################################################

e:\Nas\电路\保温箱\YZW-S8-EE22(Rev1.0)\C\User\stm8s_it.c
      1          /**
      2           ******************************************************************************
      3           * @file    stm8s_it.c
      4           * @author  MCD Application Team
      5           * @version V2.3.0
      6           * @date    16-June-2017
      7           * @brief   Main Interrupt Service Routines.
      8           *          This file provides template for all peripherals interrupt service
      9           *          routine.
     10           ******************************************************************************
     11           * @attention
     12           *
     13           * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     14           *
     15           * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16           * You may not use this file except in compliance with the License.
     17           * You may obtain a copy of the License at:
     18           *
     19           *        http://www.st.com/software_license_agreement_liberty_v2
     20           *
     21           * Unless required by applicable law or agreed to in writing, software
     22           * distributed under the License is distributed on an "AS IS" BASIS,
     23           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24           * See the License for the specific language governing permissions and
     25           * limitations under the License.
     26           *
     27           ******************************************************************************
     28           */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm8s_it.h"
     32          
     33          /** @addtogroup Template_Project
     34           * @{
     35           */
     36          
     37          /* Private typedef -----------------------------------------------------------*/
     38          /* Private define ------------------------------------------------------------*/
     39          /* Private macro -------------------------------------------------------------*/
     40          /* Private variables ---------------------------------------------------------*/
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          /* Public functions ----------------------------------------------------------*/
     44          
     45          #ifdef _COSMIC_
     46          /**
     47           * @brief Dummy Interrupt routine
     48           * @par Parameters:
     49           * None
     50           * @retval
     51           * None
     52           */
     53          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     54          {
     55             /* In order to detect unexpected events during development,
     56                it is recommended to set a breakpoint on the following instruction.
     57             */
     58          }
     59          #endif /*_COSMIC_*/
     60          
     61          /**
     62           * @brief TRAP Interrupt routine
     63           * @param  None
     64           * @retval None
     65           */

   \                                 In section .far_func.text, align 1
     66          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     67          {
     68             /* In order to detect unexpected events during development,
     69                it is recommended to set a breakpoint on the following instruction.
     70             */
     71          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80           IRET
     72          
     73          /**
     74           * @brief Top Level Interrupt routine.
     75           * @param  None
     76           * @retval None
     77           */

   \                                 In section .far_func.text, align 1
     78          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     79          
     80          {
     81             /* In order to detect unexpected events during development,
     82                it is recommended to set a breakpoint on the following instruction.
     83             */
     84          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80           IRET
     85          
     86          /**
     87           * @brief Auto Wake Up Interrupt routine.
     88           * @param  None
     89           * @retval None
     90           */

   \                                 In section .far_func.text, align 1
     91          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
     92          {
     93             /* In order to detect unexpected events during development,
     94                it is recommended to set a breakpoint on the following instruction.
     95             */
     96          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80           IRET
     97          
     98          /**
     99           * @brief Clock Controller Interrupt routine.
    100           * @param  None
    101           * @retval None
    102           */

   \                                 In section .far_func.text, align 1
    103          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    104          {
    105             /* In order to detect unexpected events during development,
    106                it is recommended to set a breakpoint on the following instruction.
    107             */
    108          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80           IRET
    109          
    110          /**
    111           * @brief External Interrupt PORTA Interrupt routine.
    112           * @param  None
    113           * @retval None
    114           */

   \                                 In section .far_func.text, align 1
    115          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    116          {
    117             /* In order to detect unexpected events during development,
    118                it is recommended to set a breakpoint on the following instruction.
    119             */
    120          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80           IRET
    121          
    122          /**
    123           * @brief External Interrupt PORTB Interrupt routine.
    124           * @param  None
    125           * @retval None
    126           */

   \                                 In section .far_func.text, align 1
    127          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    128          {
    129             /* In order to detect unexpected events during development,
    130                it is recommended to set a breakpoint on the following instruction.
    131             */
    132          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80           IRET
    133          
    134          /**
    135           * @brief External Interrupt PORTC Interrupt routine.
    136           * @param  None
    137           * @retval None
    138           */

   \                                 In section .far_func.text, align 1
    139          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    140          {
    141             /* In order to detect unexpected events during development,
    142                it is recommended to set a breakpoint on the following instruction.
    143             */
    144          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80           IRET
    145          
    146          /**
    147           * @brief External Interrupt PORTD Interrupt routine.
    148           * @param  None
    149           * @retval None
    150           */

   \                                 In section .far_func.text, align 1
    151          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    152          {
    153             /* In order to detect unexpected events during development,
    154                it is recommended to set a breakpoint on the following instruction.
    155             */
    156          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80           IRET
    157          
    158          /**
    159           * @brief External Interrupt PORTE Interrupt routine.
    160           * @param  None
    161           * @retval None
    162           */

   \                                 In section .far_func.text, align 1
    163          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    164          {
    165             /* In order to detect unexpected events during development,
    166                it is recommended to set a breakpoint on the following instruction.
    167             */
    168          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80           IRET
    169          
    170          #if defined(STM8S903) || defined(STM8AF622x)
    171          /**
    172           * @brief External Interrupt PORTF Interrupt routine.
    173           * @param  None
    174           * @retval None
    175           */
    176          INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    177          {
    178             /* In order to detect unexpected events during development,
    179                it is recommended to set a breakpoint on the following instruction.
    180             */
    181          }
    182          #endif /* (STM8S903) || (STM8AF622x) */
    183          
    184          #if defined(STM8S208) || defined(STM8AF52Ax)
    185          /**
    186           * @brief CAN RX Interrupt routine.
    187           * @param  None
    188           * @retval None
    189           */
    190          INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    191          {
    192             /* In order to detect unexpected events during development,
    193                it is recommended to set a breakpoint on the following instruction.
    194             */
    195          }
    196          
    197          /**
    198           * @brief CAN TX Interrupt routine.
    199           * @param  None
    200           * @retval None
    201           */
    202          INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    203          {
    204             /* In order to detect unexpected events during development,
    205                it is recommended to set a breakpoint on the following instruction.
    206             */
    207          }
    208          #endif /* (STM8S208) || (STM8AF52Ax) */
    209          
    210          /**
    211           * @brief SPI Interrupt routine.
    212           * @param  None
    213           * @retval None
    214           */

   \                                 In section .far_func.text, align 1
    215          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    216          {
    217             /* In order to detect unexpected events during development,
    218                it is recommended to set a breakpoint on the following instruction.
    219             */
    220          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80           IRET
    221          
    222          /**
    223           * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    224           * @param  None
    225           * @retval None
    226           */

   \                                 In section .far_func.text, align 1
    227          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    228          {
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 8A           PUSH      CC
   \   000001 84           POP       A
   \   000002 A4 BF        AND       A, #0xbf
   \   000004 88           PUSH      A
   \   000005 86           POP       CC
   \   000006 8D ......    CALLF     L:?push_l0
   \   00000A 8D ......    CALLF     L:?push_l1
    229             /* In order to detect unexpected events during development,
    230                it is recommended to set a breakpoint on the following instruction.
    231             */
    232             extern bool LED_STATUS;
    233             extern bool KEY_DOWN;
    234             extern bool KEY_UP;
    235             extern bool DS18B20_CONVERT_STATUS;
    236             extern bool CONFIG_STATUS;
    237             extern bool KEY_DOWN;
    238             extern bool CONFIG_LED_STATUS;
    239             extern bool HF_STATUS;
    240             extern bool IT_HF_STATUS;
    241          
    242             static u8 LED_PWM_TIME;
    243             static u8 LED_PWM;
    244             static u16 DS18B20_CONVERT_TIME;
    245             static u16 CONFIG_TIME;
    246             static u16 KEY_DOWN_TIME;
    247             static u16 HF_TIME_S;
    248             static u8 HF_TIME_M, HF_TIME_H;
    249          
    250             static bool bol_Config_LED_status = FALSE;
    251          
    252             if (HF_STATUS)
   \   00000E C6 ....      LD        A, L:HF_STATUS
   \   000011 4D           TNZ       A
   \   000012 27 67        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    253             {
    254                if (!IT_HF_STATUS)
   \   000014 C6 ....      LD        A, L:IT_HF_STATUS
   \   000017 4D           TNZ       A
   \   000018 26 39        JRNE      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_1
    255                {
    256                   if (HF_TIME_S < 60000)
   \   00001A CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`
   \   00001D A3 EA60      CPW       X, #0xea60
   \   000020 24 09        JRNC      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_2
    257                   {
    258                      HF_TIME_S++;
   \   000022 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`
   \   000025 5C           INCW      X
   \   000026 CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`, X
   \   000029 20 50        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    259                   }
    260                   else
    261                   {
    262                      HF_TIME_S = 0;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_2:
   \   00002B 5F           CLRW      X
   \   00002C CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`, X
    263                      HF_TIME_M++;
   \   00002F 725C ....    INC       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_M`
    264                      if (HF_TIME_M > 59)
   \   000033 C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_M`
   \   000036 A1 3C        CP        A, #0x3c
   \   000038 25 41        JRC       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    265                      {
    266                         HF_TIME_M = 0;
   \   00003A 725F ....    CLR       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_M`
    267                         HF_TIME_H++;
   \   00003E 725C ....    INC       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_H`
    268                         if (HF_TIME_H > 2)
   \   000042 C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_H`
   \   000045 A1 03        CP        A, #0x3
   \   000047 25 32        JRC       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    269                         {
    270                            HF_TIME_H = 0;
   \   000049 725F ....    CLR       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_H`
    271                            IT_HF_STATUS = TRUE;
   \   00004D 35 01 ....   MOV       L:IT_HF_STATUS, #0x1
   \   000051 20 28        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    272                         }
    273                      }
    274                   }
    275                }
    276                else
    277                {
    278                   if (HF_TIME_S < 60000)
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_1:
   \   000053 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`
   \   000056 A3 EA60      CPW       X, #0xea60
   \   000059 24 09        JRNC      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_3
    279                   {
    280                      HF_TIME_S++;
   \   00005B CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`
   \   00005E 5C           INCW      X
   \   00005F CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`, X
   \   000062 20 17        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    281                   }
    282                   else
    283                   {
    284                      HF_TIME_S = 0;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_3:
   \   000064 5F           CLRW      X
   \   000065 CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`, X
    285                      HF_TIME_M++;
   \   000068 725C ....    INC       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_M`
    286                      if (HF_TIME_M > 1)
   \   00006C C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_M`
   \   00006F A1 02        CP        A, #0x2
   \   000071 25 08        JRC       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    287                      {
    288                         HF_TIME_M = 0;
   \   000073 725F ....    CLR       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_M`
    289                         IT_HF_STATUS = FALSE;
   \   000077 725F ....    CLR       L:IT_HF_STATUS
    290                      }
    291                   }
    292                }
    293             }
    294          
    295             if (KEY_DOWN)
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0:
   \   00007B C6 ....      LD        A, L:KEY_DOWN
   \   00007E 4D           TNZ       A
   \   00007F 27 1B        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_4
    296             {
    297                if (KEY_DOWN_TIME > 500)
   \   000081 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::KEY_DOWN_TIME`
   \   000084 A3 01F5      CPW       X, #0x1f5
   \   000087 25 0A        JRC       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_5
    298                {
    299                   KEY_DOWN_TIME = 0;
   \   000089 5F           CLRW      X
   \   00008A CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::KEY_DOWN_TIME`, X
    300                   KEY_DOWN = FALSE;
   \   00008D 725F ....    CLR       L:KEY_DOWN
   \   000091 20 0D        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_6
    301                }
    302                else
    303                {
    304                   KEY_DOWN_TIME++;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_5:
   \   000093 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::KEY_DOWN_TIME`
   \   000096 5C           INCW      X
   \   000097 CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::KEY_DOWN_TIME`, X
   \   00009A 20 04        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_6
    305                }
    306             }
    307             else
    308             {
    309                KEY_DOWN_TIME = 0;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_4:
   \   00009C 5F           CLRW      X
   \   00009D CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::KEY_DOWN_TIME`, X
    310             }
    311          
    312             if (CONFIG_STATUS)
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_6:
   \   0000A0 C6 ....      LD        A, L:CONFIG_STATUS
   \   0000A3 4D           TNZ       A
   \   0000A4 27 2C        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_7
    313             {
    314                if (CONFIG_TIME > 500)
   \   0000A6 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::CONFIG_TIME`
   \   0000A9 A3 01F5      CPW       X, #0x1f5
   \   0000AC 25 1B        JRC       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_8
    315                {
    316                   CONFIG_TIME = 0;
   \   0000AE 5F           CLRW      X
   \   0000AF CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::CONFIG_TIME`, X
    317                   if (bol_Config_LED_status)
   \   0000B2 C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::bol_Config_LED_status`
   \   0000B5 4D           TNZ       A
   \   0000B6 27 06        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_9
    318                   {
    319                      bol_Config_LED_status = FALSE;
   \   0000B8 725F ....    CLR       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::bol_Config_LED_status`
   \   0000BC 20 04        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_10
    320                   }
    321                   else
    322                   {
    323                      bol_Config_LED_status = TRUE;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_9:
   \   0000BE 35 01 ....   MOV       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::bol_Config_LED_status`, #0x1
    324                   }
    325                   CONFIG_LED_STATUS = bol_Config_LED_status;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_10:
   \   0000C2 55 .... .... MOV       L:CONFIG_LED_STATUS, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::bol_Config_LED_status`
   \   0000C7 20 11        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_11
    326                }
    327                else
    328                {
    329                   CONFIG_TIME++;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_8:
   \   0000C9 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::CONFIG_TIME`
   \   0000CC 5C           INCW      X
   \   0000CD CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::CONFIG_TIME`, X
   \   0000D0 20 08        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_11
    330                }
    331             }
    332             else
    333             {
    334                CONFIG_TIME = 0;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_7:
   \   0000D2 5F           CLRW      X
   \   0000D3 CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::CONFIG_TIME`, X
    335                bol_Config_LED_status = FALSE;
   \   0000D6 725F ....    CLR       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::bol_Config_LED_status`
    336             }
    337          
    338             if (DS18B20_CONVERT_STATUS)
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_11:
   \   0000DA C6 ....      LD        A, L:DS18B20_CONVERT_STATUS
   \   0000DD 4D           TNZ       A
   \   0000DE 27 1B        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_12
    339             {
    340                if (DS18B20_CONVERT_TIME > 300)
   \   0000E0 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::DS18B20_CONVERT_TIME`
   \   0000E3 A3 012D      CPW       X, #0x12d
   \   0000E6 25 0A        JRC       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_13
    341                {
    342          
    343                   DS18B20_CONVERT_TIME = 0;
   \   0000E8 5F           CLRW      X
   \   0000E9 CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::DS18B20_CONVERT_TIME`, X
    344                   DS18B20_CONVERT_STATUS = FALSE;
   \   0000EC 725F ....    CLR       L:DS18B20_CONVERT_STATUS
   \   0000F0 20 0D        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_14
    345                }
    346                else
    347                {
    348                   DS18B20_CONVERT_TIME++;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_13:
   \   0000F2 CE ....      LDW       X, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::DS18B20_CONVERT_TIME`
   \   0000F5 5C           INCW      X
   \   0000F6 CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::DS18B20_CONVERT_TIME`, X
   \   0000F9 20 04        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_14
    349                }
    350             }
    351             else
    352             {
    353                DS18B20_CONVERT_TIME = 0;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_12:
   \   0000FB 5F           CLRW      X
   \   0000FC CF ....      LDW       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::DS18B20_CONVERT_TIME`, X
    354             }
    355          
    356             if (LED_PWM_TIME == 30)
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_14:
   \   0000FF C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM_TIME`
   \   000102 A1 1E        CP        A, #0x1e
   \   000104 26 35        JRNE      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_15
    357             {
    358                LED_PWM_TIME = 0;
   \   000106 725F ....    CLR       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM_TIME`
    359                if (LED_STATUS)
   \   00010A C6 ....      LD        A, L:LED_STATUS
   \   00010D 4D           TNZ       A
   \   00010E 27 16        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_16
    360                {
    361                   if (LED_PWM < 100)
   \   000110 C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM`
   \   000113 A1 64        CP        A, #0x64
   \   000115 24 28        JRNC      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_17
    362                   {
    363                      LED_PWM++;
   \   000117 725C ....    INC       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM`
    364                      TIM2_SetCompare1(LED_PWM);
   \   00011B C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM`
   \   00011E 5F           CLRW      X
   \   00011F 97           LD        XL, A
   \   000120 8D ......    CALLF     TIM2_SetCompare1
   \   000124 20 19        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_17
    365                   }
    366                }
    367                else
    368                {
    369                   if (LED_PWM > 0)
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_16:
   \   000126 C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM`
   \   000129 4D           TNZ       A
   \   00012A 27 13        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_17
    370                   {
    371                      LED_PWM--;
   \   00012C 725A ....    DEC       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM`
    372                      TIM2_SetCompare1(LED_PWM);
   \   000130 C6 ....      LD        A, L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM`
   \   000133 5F           CLRW      X
   \   000134 97           LD        XL, A
   \   000135 8D ......    CALLF     TIM2_SetCompare1
   \   000139 20 04        JRA       L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_17
    373                   }
    374                }
    375             }
    376             else
    377             {
    378                LED_PWM_TIME++;
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_15:
   \   00013B 725C ....    INC       L:`TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM_TIME`
    379             }
    380             TIM1_ClearITPendingBit(TIM1_IT_UPDATE);
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_17:
   \   00013F A6 01        LD        A, #0x1
   \   000141 8D ......    CALLF     TIM1_ClearITPendingBit
    381          }
   \   000145 8D ......    CALLF     L:?pop_l1
   \   000149 8D ......    CALLF     L:?pop_l0
   \   00014D 80           IRET

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM_TIME`:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::LED_PWM`:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::DS18B20_CONVERT_TIME`:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::CONFIG_TIME`:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::KEY_DOWN_TIME`:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_S`:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_M`:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::HF_TIME_H`:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
   \                     `TIM1_UPD_OVF_TRG_BRK_IRQHandler::bol_Config_LED_status`:
   \   000000              DS8 1
    382          
    383          /**
    384           * @brief Timer1 Capture/Compare Interrupt routine.
    385           * @param  None
    386           * @retval None
    387           */

   \                                 In section .far_func.text, align 1
    388          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    389          {
    390             /* In order to detect unexpected events during development,
    391                it is recommended to set a breakpoint on the following instruction.
    392             */
    393          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80           IRET
    394          
    395          #if defined(STM8S903) || defined(STM8AF622x)
    396          /**
    397           * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    398           * @param  None
    399           * @retval None
    400           */
    401          INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    402          {
    403             /* In order to detect unexpected events during development,
    404                it is recommended to set a breakpoint on the following instruction.
    405             */
    406          }
    407          
    408          /**
    409           * @brief Timer5 Capture/Compare Interrupt routine.
    410           * @param  None
    411           * @retval None
    412           */
    413          INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    414          {
    415             /* In order to detect unexpected events during development,
    416                it is recommended to set a breakpoint on the following instruction.
    417             */
    418          }
    419          
    420          #else  /* (STM8S208) || (STM8S207) || (STM8S105) || (STM8S103) || (STM8AF62Ax) || (STM8AF52Ax) || (STM8AF626x) */
    421          /**
    422           * @brief Timer2 Update/Overflow/Break Interrupt routine.
    423           * @param  None
    424           * @retval None
    425           */

   \                                 In section .far_func.text, align 1
    426          INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    427          {
    428             /* In order to detect unexpected events during development,
    429                it is recommended to set a breakpoint on the following instruction.
    430             */
    431          }
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 80           IRET
    432          
    433          /**
    434           * @brief Timer2 Capture/Compare Interrupt routine.
    435           * @param  None
    436           * @retval None
    437           */

   \                                 In section .far_func.text, align 1
    438          INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    439          {
    440             /* In order to detect unexpected events during development,
    441                it is recommended to set a breakpoint on the following instruction.
    442             */
    443          }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80           IRET
    444          #endif /* (STM8S903) || (STM8AF622x) */
    445          
    446          #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    447              defined(STM8S005) || defined(STM8AF62Ax) || defined(STM8AF52Ax) || defined(STM8AF626x)
    448          /**
    449           * @brief Timer3 Update/Overflow/Break Interrupt routine.
    450           * @param  None
    451           * @retval None
    452           */
    453          INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    454          {
    455             /* In order to detect unexpected events during development,
    456                it is recommended to set a breakpoint on the following instruction.
    457             */
    458          }
    459          
    460          /**
    461           * @brief Timer3 Capture/Compare Interrupt routine.
    462           * @param  None
    463           * @retval None
    464           */
    465          INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    466          {
    467             /* In order to detect unexpected events during development,
    468                it is recommended to set a breakpoint on the following instruction.
    469             */
    470          }
    471          #endif /* (STM8S208) || (STM8S207) || (STM8S105) || (STM8AF62Ax) || (STM8AF52Ax) || (STM8AF626x) */
    472          
    473          #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    474              defined(STM8S003) || defined(STM8S001) || defined(STM8AF62Ax) || defined(STM8AF52Ax) || defined(STM8S903)
    475          /**
    476           * @brief UART1 TX Interrupt routine.
    477           * @param  None
    478           * @retval None
    479           */

   \                                 In section .far_func.text, align 1
    480          INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    481          {
    482             /* In order to detect unexpected events during development,
    483                it is recommended to set a breakpoint on the following instruction.
    484             */
    485          }
   \                     UART1_TX_IRQHandler:
   \                     _interrupt_19:
   \   000000 80           IRET
    486          
    487          /**
    488           * @brief UART1 RX Interrupt routine.
    489           * @param  None
    490           * @retval None
    491           */

   \                                 In section .far_func.text, align 1
    492          INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    493          {
    494             /* In order to detect unexpected events during development,
    495                it is recommended to set a breakpoint on the following instruction.
    496             */
    497          }
   \                     UART1_RX_IRQHandler:
   \                     _interrupt_20:
   \   000000 80           IRET
    498          #endif /* (STM8S208) || (STM8S207) || (STM8S103) || (STM8S001) || (STM8S903) || (STM8AF62Ax) || (STM8AF52Ax) */
    499          
    500          #if defined(STM8AF622x)
    501          /**
    502           * @brief UART4 TX Interrupt routine.
    503           * @param  None
    504           * @retval None
    505           */
    506          INTERRUPT_HANDLER(UART4_TX_IRQHandler, 17)
    507          {
    508             /* In order to detect unexpected events during development,
    509                it is recommended to set a breakpoint on the following instruction.
    510             */
    511          }
    512          
    513          /**
    514           * @brief UART4 RX Interrupt routine.
    515           * @param  None
    516           * @retval None
    517           */
    518          INTERRUPT_HANDLER(UART4_RX_IRQHandler, 18)
    519          {
    520             /* In order to detect unexpected events during development,
    521                it is recommended to set a breakpoint on the following instruction.
    522             */
    523          }
    524          #endif /* (STM8AF622x) */
    525          
    526          /**
    527           * @brief I2C Interrupt routine.
    528           * @param  None
    529           * @retval None
    530           */

   \                                 In section .far_func.text, align 1
    531          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    532          {
    533             /* In order to detect unexpected events during development,
    534                it is recommended to set a breakpoint on the following instruction.
    535             */
    536          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80           IRET
    537          
    538          #if defined(STM8S105) || defined(STM8S005) || defined(STM8AF626x)
    539          /**
    540           * @brief UART2 TX interrupt routine.
    541           * @param  None
    542           * @retval None
    543           */
    544          INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    545          {
    546             /* In order to detect unexpected events during development,
    547                it is recommended to set a breakpoint on the following instruction.
    548             */
    549          }
    550          
    551          /**
    552           * @brief UART2 RX interrupt routine.
    553           * @param  None
    554           * @retval None
    555           */
    556          INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    557          {
    558             /* In order to detect unexpected events during development,
    559                it is recommended to set a breakpoint on the following instruction.
    560             */
    561          }
    562          #endif /* (STM8S105) || (STM8AF626x) */
    563          
    564          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined(STM8AF52Ax) || defined(STM8AF62Ax)
    565          /**
    566           * @brief UART3 TX interrupt routine.
    567           * @param  None
    568           * @retval None
    569           */
    570          INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    571          {
    572             /* In order to detect unexpected events during development,
    573                it is recommended to set a breakpoint on the following instruction.
    574             */
    575          }
    576          
    577          /**
    578           * @brief UART3 RX interrupt routine.
    579           * @param  None
    580           * @retval None
    581           */
    582          INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    583          {
    584             /* In order to detect unexpected events during development,
    585                it is recommended to set a breakpoint on the following instruction.
    586             */
    587          }
    588          #endif /* (STM8S208) || (STM8S207) || (STM8AF52Ax) || (STM8AF62Ax) */
    589          
    590          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined(STM8AF52Ax) || defined(STM8AF62Ax)
    591          /**
    592           * @brief ADC2 interrupt routine.
    593           * @param  None
    594           * @retval None
    595           */
    596          INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    597          {
    598             /* In order to detect unexpected events during development,
    599                it is recommended to set a breakpoint on the following instruction.
    600             */
    601          }
    602          #else  /* STM8S105 or STM8S103 or STM8S903 or STM8AF626x or STM8AF622x */
    603          /**
    604           * @brief ADC1 interrupt routine.
    605           * @par Parameters:
    606           * None
    607           * @retval
    608           * None
    609           */

   \                                 In section .far_func.text, align 1
    610          INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    611          {
    612             /* In order to detect unexpected events during development,
    613                it is recommended to set a breakpoint on the following instruction.
    614             */
    615          }
   \                     ADC1_IRQHandler:
   \                     _interrupt_24:
   \   000000 80           IRET
    616          #endif /* (STM8S208) || (STM8S207) || (STM8AF52Ax) || (STM8AF62Ax) */
    617          
    618          #if defined(STM8S903) || defined(STM8AF622x)
    619          /**
    620           * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    621           * @param  None
    622           * @retval None
    623           */
    624          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    625          {
    626             /* In order to detect unexpected events during development,
    627                it is recommended to set a breakpoint on the following instruction.
    628             */
    629          }
    630          #else  /* STM8S208 or STM8S207 or STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    631          /**
    632           * @brief Timer4 Update/Overflow Interrupt routine.
    633           * @param  None
    634           * @retval None
    635           */

   \                                 In section .far_func.text, align 1
    636          INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    637          {
    638             /* In order to detect unexpected events during development,
    639                it is recommended to set a breakpoint on the following instruction.
    640             */
    641          }
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 80           IRET
    642          #endif /* (STM8S903) || (STM8AF622x)*/
    643          
    644          /**
    645           * @brief Eeprom EEC Interrupt routine.
    646           * @param  None
    647           * @retval None
    648           */

   \                                 In section .far_func.text, align 1
    649          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    650          {
    651             /* In order to detect unexpected events during development,
    652                it is recommended to set a breakpoint on the following instruction.
    653             */
    654          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80           IRET
    655          
    656          /**
    657           * @}
    658           */
    659          
    660          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ADC1_IRQHandler
       1  AWU_IRQHandler
       1  CLK_IRQHandler
       2  CONFIG_TIME
       2  DS18B20_CONVERT_TIME
       1  EEPROM_EEC_IRQHandler
       1  EXTI_PORTA_IRQHandler
       1  EXTI_PORTB_IRQHandler
       1  EXTI_PORTC_IRQHandler
       1  EXTI_PORTD_IRQHandler
       1  EXTI_PORTE_IRQHandler
       1  HF_TIME_H
       1  HF_TIME_M
       2  HF_TIME_S
       1  I2C_IRQHandler
       2  KEY_DOWN_TIME
       1  LED_PWM
       1  LED_PWM_TIME
       1  SPI_IRQHandler
       1  TIM1_CAP_COM_IRQHandler
     334  TIM1_UPD_OVF_TRG_BRK_IRQHandler
       1  TIM2_CAP_COM_IRQHandler
       1  TIM2_UPD_OVF_BRK_IRQHandler
       1  TIM4_UPD_OVF_IRQHandler
       1  TLI_IRQHandler
       1  TRAP_IRQHandler
       1  UART1_RX_IRQHandler
       1  UART1_TX_IRQHandler
       1  bol_Config_LED_status

 
 353 bytes in section .far_func.text
  13 bytes in section .near.bss
 
 353 bytes of CODE memory
  13 bytes of DATA memory

Errors: none
Warnings: none
