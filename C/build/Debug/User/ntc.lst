###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 09/Jan/2024  17:40:25
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\User\ntc.c
#    Command line =  
#        -f
#        "e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S8-EE22(Rev1.0)\C\build\Debug\User\ntc.args.txt"
#        (--silent -lCN .\build\Debug\User\ntc.lst -I d:/IAR/STM8 -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S003
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\User\ntc.o .\User\ntc.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\User\ntc.lst
#    Object file  =  .\build\Debug\User\ntc.o
#
###############################################################################

e:\Nas\µÁ¬∑\±£Œ¬œ‰\YZW-S8-EE22(Rev1.0)\C\User\ntc.c
      1          #include "ntc.h"
      2          
      3          //ÂèÇËÄÉÁîµÂéã

   \                                 In section .near.data, align 1
      4          float RefVol = 2.5;
   \                     RefVol:
   \   000000 40200000     DC32 40200000H
      5          // NTCÈòªÂÄº

   \                                 In section .near.data, align 1
      6          float rt = 10000;
   \                     rt:
   \   000000 461C4000     DC32 461C4000H
      7          //ÂàÜÂéãÁîµÈòªÈòªÂÄº, ÂàÜÂéãÁîµÈòªÊé•VCC, NTCÊé•GND

   \                                 In section .near.data, align 1
      8          float rp = 1000;
   \                     rp:
   \   000000 447A0000     DC32 447A0000H
      9          // NTC BÂÄº

   \                                 In section .near.data, align 1
     10          float bx = 3950;
   \                     bx:
   \   000000 4576E000     DC32 4576E000H

   \                                 In section .near.data, align 1
     11          float t2 = 273.15 + 25;
   \                     t2:
   \   000000 43951333     DC32 43951333H

   \                                 In section .near.data, align 1
     12          float ka = 273.15;
   \                     ka:
   \   000000 43889333     DC32 43889333H
     13          

   \                                 In section .far_func.text, align 1
     14          void ntcDataFilter(float *data, u8 data_len)
     15          {
   \                     ntcDataFilter:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 89           PUSHW     X
   \   000009 B7 ..        LD        S:?b4, A
     16              float t;
     17              u8 i, j;
     18              for (i = 0; i < data_len; i++)
   \   00000B 3F ..        CLR       S:?b7
   \                     ??ntcDataFilter_0:
   \   00000D B6 ..        LD        A, S:?b7
   \   00000F B1 ..        CP        A, S:?b4
   \   000011 25 03        JRC       ??lb_0
   \   000013 CC ....      JP        L:??ntcDataFilter_1
     19              {
     20                  for (j = i + 1; j < data_len; j++)
   \                     ??lb_0:
   \   000016 B6 ..        LD        A, S:?b7
   \   000018 4C           INC       A
   \   000019 B7 ..        LD        S:?b5, A
   \                     ??ntcDataFilter_2:
   \   00001B B6 ..        LD        A, S:?b5
   \   00001D B1 ..        CP        A, S:?b4
   \   00001F 25 03        JRC       ??lb_1
   \   000021 CC ....      JP        L:??ntcDataFilter_3
     21                  {
     22                      if (data[i] < data[j])
   \                     ??lb_1:
   \   000024 905F         CLRW      Y
   \   000026 B6 ..        LD        A, S:?b5
   \   000028 9097         LD        YL, A
   \   00002A AE 0004      LDW       X, #0x4
   \   00002D BF ..        LDW       S:?w0, X
   \   00002F 93           LDW       X, Y
   \   000030 8D ......    CALLF     L:?mul16_x_x_w0
   \   000034 72FB 01      ADDW      X, (0x1,SP)
   \   000037 89           PUSHW     X
   \   000038 3F ..        CLR       S:?b6
   \   00003A AE 0004      LDW       X, #0x4
   \   00003D BF ..        LDW       S:?w0, X
   \   00003F BE ..        LDW       X, S:?w3
   \   000041 8D ......    CALLF     L:?mul16_x_x_w0
   \   000045 72FB 03      ADDW      X, (0x3,SP)
   \   000048 8D ......    CALLF     L:?load32_l0_0x
   \   00004C 85           POPW      X
   \   00004D 8D ......    CALLF     L:?fcmplt32_c_l0_0x
   \   000051 24 58        JRNC      L:??ntcDataFilter_4
     23                      {
     24                          t = data[j];
   \   000053 5F           CLRW      X
   \   000054 B6 ..        LD        A, S:?b5
   \   000056 97           LD        XL, A
   \   000057 90AE 0004    LDW       Y, #0x4
   \   00005B 90BF ..      LDW       S:?w0, Y
   \   00005E 8D ......    CALLF     L:?mul16_x_x_w0
   \   000062 72FB 01      ADDW      X, (0x1,SP)
   \   000065 8D ......    CALLF     L:?load32_l0_0x
   \   000069 8D ......    CALLF     L:?mov_l2_l0
     25                          data[j] = data[i];
   \   00006D 3F ..        CLR       S:?b6
   \   00006F AE 0004      LDW       X, #0x4
   \   000072 BF ..        LDW       S:?w0, X
   \   000074 BE ..        LDW       X, S:?w3
   \   000076 8D ......    CALLF     L:?mul16_x_x_w0
   \   00007A 72FB 01      ADDW      X, (0x1,SP)
   \   00007D 8D ......    CALLF     L:?load32_l3_0x
   \   000081 5F           CLRW      X
   \   000082 B6 ..        LD        A, S:?b5
   \   000084 97           LD        XL, A
   \   000085 90AE 0004    LDW       Y, #0x4
   \   000089 90BF ..      LDW       S:?w0, Y
   \   00008C 8D ......    CALLF     L:?mul16_x_x_w0
   \   000090 72FB 01      ADDW      X, (0x1,SP)
   \   000093 8D ......    CALLF     L:?load32_0x_l3
     26                          data[i] = t;
   \   000097 3F ..        CLR       S:?b6
   \   000099 AE 0004      LDW       X, #0x4
   \   00009C BF ..        LDW       S:?w0, X
   \   00009E BE ..        LDW       X, S:?w3
   \   0000A0 8D ......    CALLF     L:?mul16_x_x_w0
   \   0000A4 72FB 01      ADDW      X, (0x1,SP)
   \   0000A7 8D ......    CALLF     L:?load32_0x_l2
     27                      }
     28                  }
   \                     ??ntcDataFilter_4:
   \   0000AB 3C ..        INC       S:?b5
   \   0000AD CC ....      JP        L:??ntcDataFilter_2
     29              }
   \                     ??ntcDataFilter_3:
   \   0000B0 3C ..        INC       S:?b7
   \   0000B2 CC ....      JP        L:??ntcDataFilter_0
     30          }
   \                     ??ntcDataFilter_1:
   \   0000B5 5B 02        ADD       SP, #0x2
   \   0000B7 AC ......    JPF       L:?epilogue_l2_l3
     31          

   \                                 In section .far_func.text, align 1
     32          float ntcReadNtcRes(u16 VccAdcNum, u16 ntcAdcNum)
     33          {
   \                     ntcReadNtcRes:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 89           PUSHW     X
   \   000009 9089         PUSHW     Y
   \   00000B 52 04        SUB       SP, #0x4
     34              float t, vol;
     35              float vccvol;
     36              vol = RefVol / VccAdcNum;
   \   00000D 1E 07        LDW       X, (0x7,SP)
   \   00000F 8D ......    CALLF     L:?fcastf32u16_l0_x
   \   000013 8D ......    CALLF     L:?mov_l1_l0
   \   000017 AE ....      LDW       X, #RefVol
   \   00001A 8D ......    CALLF     L:?load32_l0_0x
   \   00001E 8D ......    CALLF     L:?fdiv32_l0_l0_l1
   \   000022 8D ......    CALLF     L:?mov_l3_l0
     37              vccvol = vol * 1024;
   \   000026 8D ......    CALLF     L:?mov_l0_l3
   \   00002A 8D ......    CALLF     L:?fmul32_l0_l0_dc32
   \   00002E 44800000     DC32      0x44800000
   \   000032 AE 0001      LDW       X, #0x1
   \   000035 8D ......    CALLF     L:?load32_xsp_l0
     38              t = vol * ntcAdcNum;
   \   000039 1E 05        LDW       X, (0x5,SP)
   \   00003B 8D ......    CALLF     L:?fcastf32u16_l0_x
   \   00003F 8D ......    CALLF     L:?mov_l1_l3
   \   000043 8D ......    CALLF     L:?fmul32_l0_l0_l1
   \   000047 8D ......    CALLF     L:?mov_l2_l0
     39              t = t / ((vccvol - t) / rp);
   \   00004B 8D ......    CALLF     L:?load32_l0_dbsp
   \   00004F 01           DC8       0x1
   \   000050 8D ......    CALLF     L:?mov_l1_l2
   \   000054 8D ......    CALLF     L:?fsub32_l0_l0_l1
   \   000058 AE ....      LDW       X, #rp
   \   00005B 8D ......    CALLF     L:?fdiv32_l0_l0_0x
   \   00005F 8D ......    CALLF     L:?mov_l1_l0
   \   000063 8D ......    CALLF     L:?mov_l0_l2
   \   000067 8D ......    CALLF     L:?fdiv32_l0_l0_l1
   \   00006B 8D ......    CALLF     L:?mov_l2_l0
     40              return t;
   \   00006F 8D ......    CALLF     L:?mov_l0_l2
   \   000073 5B 08        ADD       SP, #0x8
   \   000075 AC ......    JPF       L:?epilogue_l2_l3
     41          }
     42          

   \                                 In section .far_func.text, align 1
     43          float ntcReadNtcTemp(float ntcRes)
     44          {
   \                     ntcReadNtcTemp:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w6
   \   000008 52 04        SUB       SP, #0x4
   \   00000A 8D ......    CALLF     L:?mov_l2_l0
     45          
     46              float t;
     47              t = (1/(log(ntcRes/rt)/bx+(1/t2)))-273.15+0.5;
   \   00000E AE ....      LDW       X, #rt
   \   000011 8D ......    CALLF     L:?mov_l0_l2
   \   000015 8D ......    CALLF     L:?fdiv32_l0_l0_0x
   \   000019 8D ......    CALLF     log
   \   00001D BF ..        LDW       S:?w6, X
   \   00001F AE ....      LDW       X, #t2
   \   000022 8D ......    CALLF     L:?load32_l1_0x
   \   000026 8D ......    CALLF     L:?fdiv32_l0_dc32_l1
   \   00002A 3F800000     DC32      0x3f800000
   \   00002E 8D ......    CALLF     L:?push_l0
   \   000032 BE ..        LDW       X, S:?w6
   \   000034 8D ......    CALLF     L:?fcastf32s16_l0_x
   \   000038 AE ....      LDW       X, #bx
   \   00003B 8D ......    CALLF     L:?fdiv32_l0_l0_0x
   \   00003F 8D ......    CALLF     L:?pop_l1
   \   000043 8D ......    CALLF     L:?fadd32_l0_l0_l1
   \   000047 8D ......    CALLF     L:?mov_l1_l0
   \   00004B 8D ......    CALLF     L:?fdiv32_l0_dc32_l1
   \   00004F 3F800000     DC32      0x3f800000
   \   000053 8D ......    CALLF     L:?fadd32_l0_l0_dc32
   \   000057 C3889333     DC32      0xffffffffc3889333
   \   00005B 8D ......    CALLF     L:?fadd32_l0_l0_dc32
   \   00005F 3F000000     DC32      0x3f000000
   \   000063 AE 0001      LDW       X, #0x1
   \   000066 8D ......    CALLF     L:?load32_xsp_l0
     48              return t;
   \   00006A 8D ......    CALLF     L:?load32_l0_dbsp
   \   00006E 01           DC8       0x1
   \   00006F 5B 04        ADD       SP, #0x4
   \   000071 AC ......    JPF       L:?epilogue_l2_w6
     49          }
     50          

   \                                 In section .far_func.text, align 1
     51          float ntcReadNtcTemp_ave(float *data)
     52          {
   \                     ntcReadNtcTemp_ave:
   \   000000 8D ......    CALLF     L:?push_l3
   \   000004 8D ......    CALLF     L:?push_w4
   \   000008 BF ..        LDW       S:?w4, X
     53              float d;
     54              d = data[3] + data[4] + data[5] + data[6];
   \   00000A BE ..        LDW       X, S:?w4
   \   00000C 1C 0010      ADDW      X, #0x10
   \   00000F 9093         LDW       Y, X
   \   000011 BE ..        LDW       X, S:?w4
   \   000013 1C 000C      ADDW      X, #0xc
   \   000016 8D ......    CALLF     L:?load32_l0_0x
   \   00001A 93           LDW       X, Y
   \   00001B 8D ......    CALLF     L:?fadd32_l0_l0_0x
   \   00001F BE ..        LDW       X, S:?w4
   \   000021 1C 0014      ADDW      X, #0x14
   \   000024 8D ......    CALLF     L:?fadd32_l0_l0_0x
   \   000028 BE ..        LDW       X, S:?w4
   \   00002A 1C 0018      ADDW      X, #0x18
   \   00002D 8D ......    CALLF     L:?fadd32_l0_l0_0x
   \   000031 8D ......    CALLF     L:?mov_l3_l0
     55              d = d / 4;
   \   000035 8D ......    CALLF     L:?mov_l0_l3
   \   000039 8D ......    CALLF     L:?fdiv32_l0_l0_dc32
   \   00003D 40800000     DC32      0x40800000
   \   000041 8D ......    CALLF     L:?mov_l3_l0
     56              return d;
   \   000045 8D ......    CALLF     L:?mov_l0_l3
   \   000049 8D ......    CALLF     L:?pop_w4
   \   00004D 8D ......    CALLF     L:?pop_l3
   \   000051 87           RETF
     57          }

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  RefVol
       4  bx
       4  ka
     187  ntcDataFilter
     121  ntcReadNtcRes
     117  ntcReadNtcTemp
      82  ntcReadNtcTemp_ave
       4  rp
       4  rt
       4  t2

 
 507 bytes in section .far_func.text
  24 bytes in section .near.data
 
 507 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: 259
