###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 09/Jan/2024  17:40:24
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  .\User\flash.c
#    Command line =  
#        -f
#        "e:\Nas\电路\保温箱\YZW-S8-EE22(Rev1.0)\C\build\Debug\User\flash.args.txt"
#        (--silent -lCN .\build\Debug\User\flash.lst -I d:/IAR/STM8 -I
#        d:/IAR/STM8/stm8/lib -I Lib/H -I Lib/C -I User -D STM8S003
#        --data_model medium --code_model medium --dlib_config dlstm8smn.h -e
#        --vregs 16 -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --dependencies=m + -o
#        .\build\Debug\User\flash.o .\User\flash.c)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  .\build\Debug\User\flash.lst
#    Object file  =  .\build\Debug\User\flash.o
#
###############################################################################

e:\Nas\电路\保温箱\YZW-S8-EE22(Rev1.0)\C\User\flash.c
      1          #include "flash.h"
      2          

   \                                 In section .far_func.text, align 1
      3          int FLASH_DATA_TEM_SUM_READ()
      4          {
   \                     FLASH_DATA_TEM_SUM_READ:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w6
   \   000008 3B ....      PUSH      S:?b14
   \   00000B 52 04        SUB       SP, #0x4
      5              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   00000D A6 F7        LD        A, #0xf7
   \   00000F 8D ......    CALLF     FLASH_Unlock
      6              u32 d;
      7              u8 i;
      8              for (i = 0; i < 4; i++)
   \   000013 3F ..        CLR       S:?b14
   \                     ??FLASH_DATA_TEM_SUM_READ_0:
   \   000015 B6 ..        LD        A, S:?b14
   \   000017 A1 04        CP        A, #0x4
   \   000019 24 34        JRNC      L:??FLASH_DATA_TEM_SUM_READ_1
      9              {
     10                  d = d << 8;
   \   00001B 8D ......    CALLF     L:?mov_l0_l2
   \   00001F A6 08        LD        A, #0x8
   \   000021 8D ......    CALLF     L:?sll32_l0_l0_a
   \   000025 8D ......    CALLF     L:?mov_l2_l0
     11                  d = d | FLASH_ReadByte(FLASH_ADDRES + i);
   \   000029 5F           CLRW      X
   \   00002A B6 ..        LD        A, S:?b14
   \   00002C 97           LD        XL, A
   \   00002D 1C 4010      ADDW      X, #0x4010
   \   000030 8D ......    CALLF     L:?sext32_l0_x
   \   000034 8D ......    CALLF     FLASH_ReadByte
   \   000038 5F           CLRW      X
   \   000039 97           LD        XL, A
   \   00003A BF ..        LDW       S:?w3, X
   \   00003C 5F           CLRW      X
   \   00003D BF ..        LDW       S:?w2, X
   \   00003F 8D ......    CALLF     L:?mov_l0_l2
   \   000043 8D ......    CALLF     L:?or32_l0_l0_l1
   \   000047 8D ......    CALLF     L:?mov_l2_l0
     12              }
   \   00004B 3C ..        INC       S:?b14
   \   00004D 20 C6        JRA       L:??FLASH_DATA_TEM_SUM_READ_0
     13              if (d == 0)
   \                     ??FLASH_DATA_TEM_SUM_READ_1:
   \   00004F BE ..        LDW       X, S:?w4
   \   000051 A3 0000      CPW       X, #0x0
   \   000054 26 05        JRNE      L:??FLASH_DATA_TEM_SUM_READ_2
   \   000056 BE ..        LDW       X, S:?w5
   \   000058 A3 0000      CPW       X, #0x0
   \                     ??FLASH_DATA_TEM_SUM_READ_2:
   \   00005B 26 1C        JRNE      L:??FLASH_DATA_TEM_SUM_READ_3
     14              {
     15                  d = 0x0000012c;
   \   00005D AE 012C      LDW       X, #0x12c
   \   000060 BF ..        LDW       S:?w1, X
   \   000062 5F           CLRW      X
   \   000063 BF ..        LDW       S:?w0, X
   \   000065 8D ......    CALLF     L:?mov_l2_l0
     16                  FLASH_ProgramWord(FLASH_ADDRES, d);
   \   000069 8D ......    CALLF     L:?mov_l1_l2
   \   00006D AE 4010      LDW       X, #0x4010
   \   000070 BF ..        LDW       S:?w1, X
   \   000072 5F           CLRW      X
   \   000073 BF ..        LDW       S:?w0, X
   \   000075 8D ......    CALLF     FLASH_ProgramWord
     17              }
     18              u16 d1, d2;
     19              d1 = d >> 16;
   \                     ??FLASH_DATA_TEM_SUM_READ_3:
   \   000079 BE ..        LDW       X, S:?w4
   \   00007B 1F 03        LDW       (0x3,SP), X
     20              d2 = d;
   \   00007D BE ..        LDW       X, S:?w5
   \   00007F 1F 01        LDW       (0x1,SP), X
     21              int d3 = d2;
   \   000081 1E 01        LDW       X, (0x1,SP)
   \   000083 BF ..        LDW       S:?w6, X
     22              if (d1 == 0xffff)
   \   000085 1E 03        LDW       X, (0x3,SP)
   \   000087 A3 FFFF      CPW       X, #0xffff
   \   00008A 26 05        JRNE      L:??FLASH_DATA_TEM_SUM_READ_4
     23              {
     24                  d3 = -d3;
   \   00008C BE ..        LDW       X, S:?w6
   \   00008E 50           NEGW      X
   \   00008F BF ..        LDW       S:?w6, X
     25              }
     26              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_TEM_SUM_READ_4:
   \   000091 A6 F7        LD        A, #0xf7
   \   000093 8D ......    CALLF     FLASH_Lock
     27              delay_ms(10);
   \   000097 AE 000A      LDW       X, #0xa
   \   00009A 8D ......    CALLF     delay_ms
     28              return d3;
   \   00009E BE ..        LDW       X, S:?w6
   \   0000A0 5B 04        ADD       SP, #0x4
   \   0000A2 32 ....      POP       S:?b14
   \   0000A5 AC ......    JPF       L:?epilogue_l2_w6
     29          }

   \                                 In section .far_func.text, align 1
     30          bool FLASH_DATA_LED_STATUS_READ()
     31          {
   \                     FLASH_DATA_LED_STATUS_READ:
   \   000000 8D ......    CALLF     L:?push_w4
     32              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6 F7        LD        A, #0xf7
   \   000006 8D ......    CALLF     FLASH_Unlock
     33              bool b;
     34              u8 d = FLASH_ReadByte(FLASH_ADDRES + 4);
   \   00000A AE 4014      LDW       X, #0x4014
   \   00000D BF ..        LDW       S:?w1, X
   \   00000F 5F           CLRW      X
   \   000010 BF ..        LDW       S:?w0, X
   \   000012 8D ......    CALLF     FLASH_ReadByte
   \   000016 B7 ..        LD        S:?b9, A
     35              b = (d == 0xf1) ? TRUE : FALSE;
   \   000018 B6 ..        LD        A, S:?b9
   \   00001A A1 F1        CP        A, #0xf1
   \   00001C 26 06        JRNE      L:??FLASH_DATA_LED_STATUS_READ_0
   \   00001E 35 01 ....   MOV       S:?b8, #0x1
   \   000022 20 02        JRA       L:??FLASH_DATA_LED_STATUS_READ_1
   \                     ??FLASH_DATA_LED_STATUS_READ_0:
   \   000024 3F ..        CLR       S:?b8
     36              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_LED_STATUS_READ_1:
   \   000026 A6 F7        LD        A, #0xf7
   \   000028 8D ......    CALLF     FLASH_Lock
     37              delay_ms(10);
   \   00002C AE 000A      LDW       X, #0xa
   \   00002F 8D ......    CALLF     delay_ms
     38              return b;
   \   000033 B6 ..        LD        A, S:?b8
   \   000035 AC ......    JPF       L:?epilogue_w4
     39          }

   \                                 In section .far_func.text, align 1
     40          bool FLASH_DATA_TEM_STATUS_READ()
     41          {
   \                     FLASH_DATA_TEM_STATUS_READ:
   \   000000 8D ......    CALLF     L:?push_w4
     42              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6 F7        LD        A, #0xf7
   \   000006 8D ......    CALLF     FLASH_Unlock
     43              bool b;
     44              u8 d = FLASH_ReadByte(FLASH_ADDRES + 5);
   \   00000A AE 4015      LDW       X, #0x4015
   \   00000D BF ..        LDW       S:?w1, X
   \   00000F 5F           CLRW      X
   \   000010 BF ..        LDW       S:?w0, X
   \   000012 8D ......    CALLF     FLASH_ReadByte
   \   000016 B7 ..        LD        S:?b9, A
     45              b = (d == 0xf1) ? TRUE : FALSE;
   \   000018 B6 ..        LD        A, S:?b9
   \   00001A A1 F1        CP        A, #0xf1
   \   00001C 26 06        JRNE      L:??FLASH_DATA_TEM_STATUS_READ_0
   \   00001E 35 01 ....   MOV       S:?b8, #0x1
   \   000022 20 02        JRA       L:??FLASH_DATA_TEM_STATUS_READ_1
   \                     ??FLASH_DATA_TEM_STATUS_READ_0:
   \   000024 3F ..        CLR       S:?b8
     46              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_TEM_STATUS_READ_1:
   \   000026 A6 F7        LD        A, #0xf7
   \   000028 8D ......    CALLF     FLASH_Lock
     47              delay_ms(10);
   \   00002C AE 000A      LDW       X, #0xa
   \   00002F 8D ......    CALLF     delay_ms
     48              return b;
   \   000033 B6 ..        LD        A, S:?b8
   \   000035 AC ......    JPF       L:?epilogue_w4
     49          }

   \                                 In section .far_func.text, align 1
     50          u8 FLASH_DATA_FAN_PWM_READ()
     51          {
   \                     FLASH_DATA_FAN_PWM_READ:
   \   000000 3B ....      PUSH      S:?b8
     52              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000003 A6 F7        LD        A, #0xf7
   \   000005 8D ......    CALLF     FLASH_Unlock
     53              u8 d = FLASH_ReadByte(FLASH_ADDRES + 6);
   \   000009 AE 4016      LDW       X, #0x4016
   \   00000C BF ..        LDW       S:?w1, X
   \   00000E 5F           CLRW      X
   \   00000F BF ..        LDW       S:?w0, X
   \   000011 8D ......    CALLF     FLASH_ReadByte
   \   000015 B7 ..        LD        S:?b8, A
     54              if (d == 0)
   \   000017 3D ..        TNZ       S:?b8
   \   000019 26 12        JRNE      L:??FLASH_DATA_FAN_PWM_READ_0
     55              {
     56                  d = 60;
   \   00001B A6 3C        LD        A, #0x3c
   \   00001D B7 ..        LD        S:?b8, A
     57                  FLASH_ProgramByte(FLASH_ADDRES + 6, d);
   \   00001F B6 ..        LD        A, S:?b8
   \   000021 AE 4016      LDW       X, #0x4016
   \   000024 BF ..        LDW       S:?w1, X
   \   000026 5F           CLRW      X
   \   000027 BF ..        LDW       S:?w0, X
   \   000029 8D ......    CALLF     FLASH_ProgramByte
     58              }
     59              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_FAN_PWM_READ_0:
   \   00002D A6 F7        LD        A, #0xf7
   \   00002F 8D ......    CALLF     FLASH_Lock
     60              delay_ms(10);
   \   000033 AE 000A      LDW       X, #0xa
   \   000036 8D ......    CALLF     delay_ms
     61              return d;
   \   00003A B6 ..        LD        A, S:?b8
   \   00003C 32 ....      POP       S:?b8
   \   00003F 87           RETF
     62          }
     63          

   \                                 In section .far_func.text, align 1
     64          bool FLASH_DATA_HF_STATUS_READ()
     65          {
   \                     FLASH_DATA_HF_STATUS_READ:
   \   000000 8D ......    CALLF     L:?push_w4
     66              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6 F7        LD        A, #0xf7
   \   000006 8D ......    CALLF     FLASH_Unlock
     67              bool b;
     68              u8 d = FLASH_ReadByte(FLASH_ADDRES + 7);
   \   00000A AE 4017      LDW       X, #0x4017
   \   00000D BF ..        LDW       S:?w1, X
   \   00000F 5F           CLRW      X
   \   000010 BF ..        LDW       S:?w0, X
   \   000012 8D ......    CALLF     FLASH_ReadByte
   \   000016 B7 ..        LD        S:?b9, A
     69              b = (d == 0xf1) ? TRUE : FALSE;
   \   000018 B6 ..        LD        A, S:?b9
   \   00001A A1 F1        CP        A, #0xf1
   \   00001C 26 06        JRNE      L:??FLASH_DATA_HF_STATUS_READ_0
   \   00001E 35 01 ....   MOV       S:?b8, #0x1
   \   000022 20 02        JRA       L:??FLASH_DATA_HF_STATUS_READ_1
   \                     ??FLASH_DATA_HF_STATUS_READ_0:
   \   000024 3F ..        CLR       S:?b8
     70              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_HF_STATUS_READ_1:
   \   000026 A6 F7        LD        A, #0xf7
   \   000028 8D ......    CALLF     FLASH_Lock
     71              delay_ms(10);
   \   00002C AE 000A      LDW       X, #0xa
   \   00002F 8D ......    CALLF     delay_ms
     72              return b;
   \   000033 B6 ..        LD        A, S:?b8
   \   000035 AC ......    JPF       L:?epilogue_w4
     73          }
     74          

   \                                 In section .far_func.text, align 1
     75          void FLASH_DATA_HF_STATUS_WRITE(bool b)
     76          {
   \                     FLASH_DATA_HF_STATUS_WRITE:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 B7 ..        LD        S:?b8, A
     77              u8 d;
     78              d = b ? 0xf1 : 0x00;
   \   000006 3D ..        TNZ       S:?b8
   \   000008 27 06        JREQ      L:??FLASH_DATA_HF_STATUS_WRITE_0
   \   00000A 35 F1 ....   MOV       S:?b9, #0xf1
   \   00000E 20 02        JRA       L:??FLASH_DATA_HF_STATUS_WRITE_1
   \                     ??FLASH_DATA_HF_STATUS_WRITE_0:
   \   000010 3F ..        CLR       S:?b9
     79              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_HF_STATUS_WRITE_1:
   \   000012 A6 F7        LD        A, #0xf7
   \   000014 8D ......    CALLF     FLASH_Unlock
     80              FLASH_ProgramByte(FLASH_ADDRES + 7, d);
   \   000018 B6 ..        LD        A, S:?b9
   \   00001A AE 4017      LDW       X, #0x4017
   \   00001D BF ..        LDW       S:?w1, X
   \   00001F 5F           CLRW      X
   \   000020 BF ..        LDW       S:?w0, X
   \   000022 8D ......    CALLF     FLASH_ProgramByte
     81              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \   000026 A6 F7        LD        A, #0xf7
   \   000028 8D ......    CALLF     FLASH_Lock
     82              delay_ms(10);
   \   00002C AE 000A      LDW       X, #0xa
   \   00002F 8D ......    CALLF     delay_ms
     83          }
   \   000033 AC ......    JPF       L:?epilogue_w4
     84          

   \                                 In section .far_func.text, align 1
     85          void FLASH_DATA_TEM_SUM_WRITE(int d)
     86          {
   \                     FLASH_DATA_TEM_SUM_WRITE:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 52 02        SUB       SP, #0x2
   \   00000A BF ..        LDW       S:?w6, X
     87              u16 d1, d2;
     88              u32 d3;
     89              if (d < 0)
   \   00000C BE ..        LDW       X, S:?w6
   \   00000E A3 0000      CPW       X, #0x0
   \   000011 2E 06        JRSGE     L:??FLASH_DATA_TEM_SUM_WRITE_0
     90              {
     91                  d1 = 0xffff;
   \   000013 5F           CLRW      X
   \   000014 5A           DECW      X
   \   000015 BF ..        LDW       S:?w7, X
   \   000017 20 03        JRA       L:??FLASH_DATA_TEM_SUM_WRITE_1
     92              }
     93              else
     94              {
     95                  d1 = 0x0000;
   \                     ??FLASH_DATA_TEM_SUM_WRITE_0:
   \   000019 5F           CLRW      X
   \   00001A BF ..        LDW       S:?w7, X
     96              }
     97              d2 = d;
   \                     ??FLASH_DATA_TEM_SUM_WRITE_1:
   \   00001C BE ..        LDW       X, S:?w6
   \   00001E 1F 01        LDW       (0x1,SP), X
     98              d3 = d1;
   \   000020 8D ......    CALLF     L:?mov_w1_w7
   \   000024 5F           CLRW      X
   \   000025 BF ..        LDW       S:?w0, X
   \   000027 8D ......    CALLF     L:?mov_l2_l0
     99              d3 = d3 << 16;
   \   00002B 8D ......    CALLF     L:?mov_l0_l2
   \   00002F A6 10        LD        A, #0x10
   \   000031 8D ......    CALLF     L:?sll32_l0_l0_a
   \   000035 8D ......    CALLF     L:?mov_l2_l0
    100              d3 = d3 | d2;
   \   000039 1E 01        LDW       X, (0x1,SP)
   \   00003B BF ..        LDW       S:?w3, X
   \   00003D 5F           CLRW      X
   \   00003E BF ..        LDW       S:?w2, X
   \   000040 8D ......    CALLF     L:?mov_l0_l2
   \   000044 8D ......    CALLF     L:?or32_l0_l0_l1
   \   000048 8D ......    CALLF     L:?mov_l2_l0
    101              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   00004C A6 F7        LD        A, #0xf7
   \   00004E 8D ......    CALLF     FLASH_Unlock
    102              FLASH_ProgramWord(FLASH_ADDRES, d3);
   \   000052 8D ......    CALLF     L:?mov_l1_l2
   \   000056 AE 4010      LDW       X, #0x4010
   \   000059 BF ..        LDW       S:?w1, X
   \   00005B 5F           CLRW      X
   \   00005C BF ..        LDW       S:?w0, X
   \   00005E 8D ......    CALLF     FLASH_ProgramWord
    103              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \   000062 A6 F7        LD        A, #0xf7
   \   000064 8D ......    CALLF     FLASH_Lock
    104              delay_ms(10);
   \   000068 AE 000A      LDW       X, #0xa
   \   00006B 8D ......    CALLF     delay_ms
    105          }
   \   00006F 5B 02        ADD       SP, #0x2
   \   000071 AC ......    JPF       L:?epilogue_l2_l3

   \                                 In section .far_func.text, align 1
    106          void FLASH_DATA_LED_STATUS_WRITE(bool b)
    107          {
   \                     FLASH_DATA_LED_STATUS_WRITE:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 B7 ..        LD        S:?b8, A
    108              u8 d;
    109              d = b ? 0xf1 : 0x00;
   \   000006 3D ..        TNZ       S:?b8
   \   000008 27 06        JREQ      L:??FLASH_DATA_LED_STATUS_WRITE_0
   \   00000A 35 F1 ....   MOV       S:?b9, #0xf1
   \   00000E 20 02        JRA       L:??FLASH_DATA_LED_STATUS_WRITE_1
   \                     ??FLASH_DATA_LED_STATUS_WRITE_0:
   \   000010 3F ..        CLR       S:?b9
    110              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_LED_STATUS_WRITE_1:
   \   000012 A6 F7        LD        A, #0xf7
   \   000014 8D ......    CALLF     FLASH_Unlock
    111              FLASH_ProgramByte(FLASH_ADDRES + 4, d);
   \   000018 B6 ..        LD        A, S:?b9
   \   00001A AE 4014      LDW       X, #0x4014
   \   00001D BF ..        LDW       S:?w1, X
   \   00001F 5F           CLRW      X
   \   000020 BF ..        LDW       S:?w0, X
   \   000022 8D ......    CALLF     FLASH_ProgramByte
    112              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \   000026 A6 F7        LD        A, #0xf7
   \   000028 8D ......    CALLF     FLASH_Lock
    113              delay_ms(10);
   \   00002C AE 000A      LDW       X, #0xa
   \   00002F 8D ......    CALLF     delay_ms
    114          }
   \   000033 AC ......    JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1
    115          void FLASH_DATA_TEM_STATUS_WRTIE(bool b)
    116          {
   \                     FLASH_DATA_TEM_STATUS_WRTIE:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 B7 ..        LD        S:?b8, A
    117              u8 d;
    118              d = b ? 0xf1 : 0x00;
   \   000006 3D ..        TNZ       S:?b8
   \   000008 27 06        JREQ      L:??FLASH_DATA_TEM_STATUS_WRTIE_0
   \   00000A 35 F1 ....   MOV       S:?b9, #0xf1
   \   00000E 20 02        JRA       L:??FLASH_DATA_TEM_STATUS_WRTIE_1
   \                     ??FLASH_DATA_TEM_STATUS_WRTIE_0:
   \   000010 3F ..        CLR       S:?b9
    119              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_TEM_STATUS_WRTIE_1:
   \   000012 A6 F7        LD        A, #0xf7
   \   000014 8D ......    CALLF     FLASH_Unlock
    120              FLASH_ProgramByte(FLASH_ADDRES + 5, d);
   \   000018 B6 ..        LD        A, S:?b9
   \   00001A AE 4015      LDW       X, #0x4015
   \   00001D BF ..        LDW       S:?w1, X
   \   00001F 5F           CLRW      X
   \   000020 BF ..        LDW       S:?w0, X
   \   000022 8D ......    CALLF     FLASH_ProgramByte
    121              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \   000026 A6 F7        LD        A, #0xf7
   \   000028 8D ......    CALLF     FLASH_Lock
    122              delay_ms(10);
   \   00002C AE 000A      LDW       X, #0xa
   \   00002F 8D ......    CALLF     delay_ms
    123          }
   \   000033 AC ......    JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1
    124          void FLASH_DATA_FAN_PWM_WRITE(u8 d)
    125          {
   \                     FLASH_DATA_FAN_PWM_WRITE:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 B7 ..        LD        S:?b8, A
    126              u8 d1 = (d < 50) ? 50 : d;
   \   000006 B6 ..        LD        A, S:?b8
   \   000008 A1 32        CP        A, #0x32
   \   00000A 24 06        JRNC      L:??FLASH_DATA_FAN_PWM_WRITE_0
   \   00000C 35 32 ....   MOV       S:?b9, #0x32
   \   000010 20 03        JRA       L:??FLASH_DATA_FAN_PWM_WRITE_1
   \                     ??FLASH_DATA_FAN_PWM_WRITE_0:
   \   000012 45 .. ..     MOV       S:?b9, S:?b8
    127              d1 = (d1 > 100) ? 100 : d1;
   \                     ??FLASH_DATA_FAN_PWM_WRITE_1:
   \   000015 B6 ..        LD        A, S:?b9
   \   000017 A1 65        CP        A, #0x65
   \   000019 25 06        JRC       L:??FLASH_DATA_FAN_PWM_WRITE_2
   \   00001B 35 64 ....   MOV       S:?b9, #0x64
   \   00001F 20 00        JRA       L:??FLASH_DATA_FAN_PWM_WRITE_3
    128              FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \                     ??FLASH_DATA_FAN_PWM_WRITE_2:
   \                     ??FLASH_DATA_FAN_PWM_WRITE_3:
   \   000021 A6 F7        LD        A, #0xf7
   \   000023 8D ......    CALLF     FLASH_Unlock
    129              FLASH_ProgramByte(FLASH_ADDRES + 6, d1);
   \   000027 B6 ..        LD        A, S:?b9
   \   000029 AE 4016      LDW       X, #0x4016
   \   00002C BF ..        LDW       S:?w1, X
   \   00002E 5F           CLRW      X
   \   00002F BF ..        LDW       S:?w0, X
   \   000031 8D ......    CALLF     FLASH_ProgramByte
    130              FLASH_Lock(FLASH_MEMTYPE_DATA);
   \   000035 A6 F7        LD        A, #0xf7
   \   000037 8D ......    CALLF     FLASH_Lock
    131              delay_ms(10);
   \   00003B AE 000A      LDW       X, #0xa
   \   00003E 8D ......    CALLF     delay_ms
    132          }
   \   000042 AC ......    JPF       L:?epilogue_w4

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  FLASH_DATA_FAN_PWM_READ
      70  FLASH_DATA_FAN_PWM_WRITE
      57  FLASH_DATA_HF_STATUS_READ
      55  FLASH_DATA_HF_STATUS_WRITE
      57  FLASH_DATA_LED_STATUS_READ
      55  FLASH_DATA_LED_STATUS_WRITE
      57  FLASH_DATA_TEM_STATUS_READ
      55  FLASH_DATA_TEM_STATUS_WRTIE
     169  FLASH_DATA_TEM_SUM_READ
     117  FLASH_DATA_TEM_SUM_WRITE

 
 756 bytes in section .far_func.text
 
 756 bytes of CODE memory

Errors: none
Warnings: 258
